ECalculatorJunior<-function(dataset, Kalibracni, Substraty, Nmeasure, empty, Samples, DW){
  
  #Loop function
  lfunction<-function(sheet){
    
    #Reading data
    ##Careful, sheets are read from the opposite direction (last measurements represent first sheets) 
    e_0<-read.xlsx(xlsxFile = dataset, sheet=sheet,
                 rows=30:37, cols = 2:13, colNames = F)
    # e_0<-read.xlsx(xlsxFile = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/aerobni/Enzymes_raw/MUF M1.xlsx", sheet=sheet,
    #           rows=30:37, cols = 2:13, colNames = F)
    # 
    #Rearranging the data
    e_0r<-data.frame(Calibration = c(rep("TRUE", times = 3*4*2+2*12), #define the data set for calibration and measurement
                                     rep("FALSE", times = 96-3*4*2-12)),
                     Substrate = c(rep("MUF", times = 3*4+12), rep("AMF", times = 3*4+12),#for calibration
                                   rep("MUF", times = 4*4*3), rep("AMF", times = 4*3)),#for samples
                     Enzyme = c(rep("NO", times = 3*4+12), rep("NO", times = 3*4+12),#calibration
                                rep("BetaG", times = 12), rep("Cellob", times = 12),
                                rep("Phosph", times = 12), rep("Chitin", times = 12), rep("Leucin", times = 12)),#samples
                     ConcCal = c(rep(Kalibracni, times = 4), rep(0, times = 12), #umol/L MUF after dilution 
                                 rep(Kalibracni, times = 4), rep(0, times = 12), #umol/L AMC after dilution
                                 rep(NA, times = 96-3*4*2-12)), #Samples
                     ConcEnzyme = c(rep(NA, times = 3*4*2+2*12), #calibration
                                    rep(Substraty, times = 20)), #umol/L respective substrates after dilution
                     Sample = c(rep(rep(c("A", "B", "C", "D"), each = 3), 4), #calibration
                                rep(rep(c("A", "B", "C", "D"), each = 3), 5)), #samples
                     E = c(as.numeric(e_0[8, ]), as.numeric(e_0[6, ]), #Calibration MUF
                           as.numeric(e_0[7, ]), as.numeric(e_0[6, ]), #Calibration AMF
                           as.numeric(e_0[1, ]), #BetaG
                           as.numeric(e_0[2, ]), #Cellob
                           as.numeric(e_0[3, ]), #Phosph
                           as.numeric(e_0[2, ]), #Chitin
                           as.numeric(e_0[2, ])) #Leucin
    )
    
    #Add time stamp
    xdate<-read.xlsx(xlsxFile = dataset, 
                   sheet=sheet,
                  rows=26, cols = 2, colNames = F)
    # xdate<-read.xlsx(xlsxFile = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/aerobni/Enzymes_raw/MUF M1.xlsx", 
    #                 sheet=sheet,
    #                 rows=26, cols = 2, colNames = F)
    # 
    e_0r$Date<-as.POSIXct(xdate[1,1], format = "%d.%m.%Y %H:%M:%S")
    
    return(e_0r)
  }
  
  ##The file contains data from four plates. There are 4 samples on each plate. Plates are sorted same way at each time
  ###Plate 1
  ID=seq(from=Nmeasure-empty, to=1, by=-4)
  ####first measurement
  allPlate1<-lfunction(sheet = ID[1])
  ####all other measurements
  for(l in ID[-1]){
    allPlate1<-rbind(allPlate1, lfunction(sheet = l))
  }
  #####Calculate the time differences
  allPlate1$Time<-as.numeric(difftime(allPlate1$Date, allPlate1$Date[1], units = "hours"))
  allPlate1$DW<-numeric(length = nrow(allPlate1))
  for(n in unique(allPlate1$Sample)){
    allPlate1[allPlate1$Sample==n, "DW"]<-DW[n, 1]
  }
  #####Recode Samples 
  allPlate1$Sample<-recode(allPlate1$Sample, "A"=Samples[1, 1], "B"=Samples[1, 2], "C"=Samples[1, 3], "D"=Samples[1, 4]) 
  
  ###Plate 2
  ID=seq(from=Nmeasure-empty-1, to=1, by=-4)
  ####first measurement
  allPlate2<-lfunction(sheet = ID[1])
  ####all other measurements
  for(l in ID[-1]){
    allPlate2<-rbind(allPlate2, lfunction(sheet = l))
  }
  #####Calculate the time differences
  allPlate2$Time<-as.numeric(difftime(allPlate2$Date, allPlate2$Date[1], units = "hours"))
  allPlate2$DW<-numeric(length = nrow(allPlate2))
  for(n in unique(allPlate2$Sample)){
    allPlate2[allPlate2$Sample==n, "DW"]<-DW[n, 2]
  }
  #####Recode Samples 
  allPlate2$Sample<-recode(allPlate2$Sample, "A"=Samples[2, 1], "B"=Samples[2, 2], "C"=Samples[2, 3], "D"=Samples[2, 4]) 
  
  ###Plate 3
  ID=seq(from=Nmeasure-empty-2, to=1, by=-4)
  ####first measurement
  allPlate3<-lfunction(sheet = ID[1])
  ####all other measurements
  for(l in ID[-1]){
    allPlate3<-rbind(allPlate3, lfunction(sheet = l))
  }
  #####Calculate the time differences
  allPlate3$Time<-as.numeric(difftime(allPlate3$Date, allPlate3$Date[1], units = "hours"))
  allPlate3$DW<-numeric(length = nrow(allPlate3))
  for(n in unique(allPlate3$Sample)){
    allPlate3[allPlate3$Sample==n, "DW"]<-DW[n, 3]
  }
  #####Recode Samples 
  allPlate3$Sample<-recode(allPlate3$Sample, "A"=Samples[3, 1], "B"=Samples[3, 2], "C"=Samples[3, 3], "D"=Samples[3, 4]) 
  
  ###Plate 4
  ID=seq(from=Nmeasure-empty-3, to=1, by=-4)
  ####first measurement
  allPlate4<-lfunction(sheet = ID[1])
  ####all other measurements
  for(l in ID[-1]){
    allPlate4<-rbind(allPlate4, lfunction(sheet = l))
  }
  #####Calculate the time differences
  allPlate4$Time<-as.numeric(difftime(allPlate4$Date, allPlate4$Date[1], units = "hours"))
  allPlate4$DW<-numeric(length = nrow(allPlate4))
  for(n in unique(allPlate4$Sample)){
    allPlate4[allPlate4$Sample==n, "DW"]<-DW[n, 4]
  }
  #####Recode Samples 
  allPlate4$Sample<-recode(allPlate4$Sample, "A"=Samples[4, 1], "B"=Samples[4, 2], "C"=Samples[4, 3], "D"=Samples[4, 4]) 
  
  all<-rbind(allPlate1, allPlate2, allPlate3, allPlate4)
  
  
  #divide data set into calibrations, controls and real data
  cals<-subset(all, Calibration == "TRUE")
  d<-subset(all, Calibration != "TRUE")
  
  #~~~~~~~~~~Unused argument from previous version~~~~~~~~~~~~~~~~~~~~#
  # #Subtract blanks
  # cals$Ecorr<-numeric(length = nrow(cals))
  # blanks$Ecorr<-numeric(length = nrow(blanks))
  # d$Ecorr<-numeric(length = nrow(d))
  # ##Calibrations
  # for(i in unique(cals$Slurry)){
  #   cals[cals$Slurry==i, "Ecorr"]<-cals[cals$Slurry==i, "E"]-
  #     mean(cals[(cals$Slurry==i & cals$C_MUB==0), "E"], na.rm=T)
  # }
  # ##blanks
  # blanks$Ecorr<-blanks$E-mean(cals[(cals$Slurry==0 & cals$C_MUB==0), "E"], na.rm=T)
  # ##data
  # d$Time<-Times
  # 
  # if(intens=="TRUE"){
  #   for(i in unique(d$Slurry)){
  #     d[d$Slurry==i, "Ecorr"]<-d[d$Slurry==i, "E"]-
  #       mean(c(as.numeric(cals[(cals$Slurry==i & cals$C_MUB==0), "E"]),
  #              as.numeric(d[(d$Slurry==i & d$Time==0), "E"])), na.rm=T)
  #   }
  # }else{
  #   for(i in unique(d$Slurry)){
  #     d[d$Slurry==i, "Ecorr"]<-d[d$Slurry==i, "E"]-
  #       mean(as.numeric(cals[(cals$Slurry==i & cals$C_MUB==0), "E"]), na.rm=T)
  #   }
  # }
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  
  
  #Use linear regression to make calculate MUB/AMC concentration in umol/L
  d$P<-numeric(length = nrow(d))
  
  for(i in unique(d$Sample)){
    for(n in unique(d$Substrate)){
      #polynomial regression
        cal_contr<-lm(ConcCal~E, data = cals[(cals$Sample==i & cals$Substrate==n), ])
        
        d[(d$Sample==i &
             d$Substrate==n), "P"]<-as.numeric(predict(cal_contr, 
                                                       newdata=d[(d$Sample==i &
                                                                  d$Substrate==n),] ))
      
    }
  }
  
  #Replace negative values by 0
  d$Pcorr<-ifelse(d$P<0, 0, d$P)
  #Recalculate Pcorr to umol/g
  d$Pcorr2<-with(d, Pcorr/10/(200/250*DW))
  #Recalculate added substrate concentration to umol/g
  d$ConcEnzyme2<-with(d, ConcEnzyme/10/(200/250*DW))
  
  all_out<-list(data=d, calibration=cals)
  return(all_out)
}