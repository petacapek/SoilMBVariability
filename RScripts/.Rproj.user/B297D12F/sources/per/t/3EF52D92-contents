#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~kec coefficient calibration~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~applying DEB theory~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Libraries
library(ggplot2)
library(dplyr)
library(reshape)
library(minpack.lm)
library(bbmle)
library(deSolve)
library(FME)
library(DEoptim)
library(ABCoptim)
library(rcompanion)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#ggplot theme
theme_min<-theme(axis.text.x=element_text(vjust=0.2, size=18, colour="black"),
                 axis.text.y=element_text(hjust=0.2, size=18, colour="black"),
                 axis.title=element_text(size=18, colour="black"),
                 axis.line=element_line(size=0.5, colour="black"),
                 strip.text=element_text(size=18, face="bold"),
                 axis.ticks=element_line(size=1, colour="black"),
                 #axis.ticks.length=unit(-0.05, "cm"),
                 panel.background=element_rect(colour="black", fill="white"),
                 panel.grid=element_line(linetype=0),
                 legend.text=element_text(size=14, colour="black"),
                 legend.title=element_text(size=14, colour="black"),
                 legend.position=c("right"),
                 legend.key.size=unit(1, "cm"),
                 strip.background=element_rect(fill="grey98", colour="black"),
                 legend.key=element_rect(fill="white", size=1.2),
                 legend.spacing=unit(0.5, "cm"),
                 plot.title=element_text(size=18, face="bold", hjust=-0.05))
#===========================
# All estimated parameters are stored here
parsAll <- data.frame(Study = character(), Treatment = character(), 
                      yA = numeric(), Km = numeric(), v = numeric(),
                      m = numeric(), g = numeric(), ce = numeric(), nX1 = numeric(), 
                      iX1 = numeric(),  tX1 = numeric(), te = numeric(), rX1 = numeric(), re = numeric(),
                      pX1 = numeric(), pe = numeric(), lX1 = numeric(), le = numeric())
#===========================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Study of Wardle and Parkinson (1990)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
WPData = read.csv("../SoilMBVariabilityData/Wardle1990.csv")
#Visualizing the data
ggplot(WPData, aes(Time, kec)) + geom_point(cex=6, pch=21, aes(fill = Moisture)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  theme(legend.position = c(0.15, 0.25)) + ylim(0.2, 0.45) +
  scale_fill_manual(values = c("white", "grey30", "grey50", "grey70", "black")) + facet_grid(.~MicGroup)
  
#Fitting the DEB model
##Assumption 1: f = 0 because all substrate has been consumed fast
###Applying the assumption, equation to fit has a form
###kec = (nX1*MX1 + ne*ce*e(t))/(MX1 + ce*e(t))
###where e(t) = e0*exp(-v*Time)

##Assumption 2: ne = 1
###Applying assumption 2 changes equation to
###kec = (nX1*MX1 + ce*e(t))/(MX1 + ce*e(t))

##Assumption 3: MX1 = ce/4 (Henegraaf and Muller, 2001)
###Applying assumption 3 changes equation to
###kec = (nX1/4 + e(t))/(0.25 + e(t))

###Across all data
nlsWP0 <- nls(kec ~ (nX1/4 + e0*exp(-v*Time))/(0.25 + e0*exp(-v*Time)),
               WPData, start = list(nX1 = 0.4, e0 = 1e-3, v = 0.01))
summary(nlsWP0)

#Visualizing the fit
WPcoefs1<-coef(nlsWP0)
ggplot(WPData, aes(Time, kec)) + geom_point(cex=6, pch=21, aes(fill = Moisture)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  theme(legend.position = c(0.15, 0.25)) + ylim(0.2, 0.45) +
  scale_fill_manual(values = c("white", "grey30", "grey50", "grey70", "black")) + facet_grid(.~MicGroup) +
  stat_function(fun = function(x){(WPcoefs1[1]/4 + WPcoefs1[2]*exp(-WPcoefs1[3]*x))/
      (0.25 + WPcoefs1[2]*exp(-WPcoefs1[3]*x))}, lwd = 1.5)

###nX1 different for bacteria and fungi
nlsWP1B <- nls(kec ~ (nX1/4 + e0*exp(-v*Time))/(0.25 + e0*exp(-v*Time)),
              WPData, start = list(nX1 = 0.4, e0 = 0.04, v = 0.03),
              subset = MicGroup == "Bacteria")
nlsWP1F <- nls(kec ~ (nX1/4 + e0*exp(-v*Time))/(0.25 + e0*exp(-v*Time)),
               WPData, start = list(nX1 = 0.4, e0 = 0.04, v = 0.03),
               subset = MicGroup == "Fungi")
nlsWP1 <- nls(kec ~ (nX1[MicGroup]/4 + e0*exp(-v*Time))/(0.25 + e0*exp(-v*Time)),
              WPData, start = list(nX1 = c(0.3, 0.3), e0 = 0.04, v = 0.03),
              control = c(maxiter = 1e9))
summary(nlsWP1)
anova(nlsWP0, nlsWP1)

#Visualizing the fit
WPcoefs2<-coef(nlsWP1)
WPPreds<-data.frame(MicGroup = rep(c("Bacteria", "Fungi"), each = 31), Time = rep(seq(0, 30), 2), kec = numeric(length = 62))
for(i in 1:nrow(WPPreds)){
  if(WPPreds$MicGroup[i] == "Bacteria"){
    WPPreds$kec[i] <- (WPcoefs2[1]/4 + WPcoefs2[3]*exp(-WPcoefs2[4]*WPPreds$Time[i]))/
      (0.25 + WPcoefs2[3]*exp(-WPcoefs2[4]*WPPreds$Time[i]))
  }else{
    WPPreds$kec[i] <- (WPcoefs2[2]/4 + WPcoefs2[3]*exp(-WPcoefs2[4]*WPPreds$Time[i]))/
      (0.25 + WPcoefs2[3]*exp(-WPcoefs2[4]*WPPreds$Time[i]))
  }
}

ggplot(WPData, aes(Time, kec)) + geom_point(cex=6, pch=21, aes(fill = Moisture)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  theme(legend.position = c(0.15, 0.25)) + ylim(0.2, 0.45) +
  scale_fill_manual(values = c("white", "grey30", "grey50", "grey70", "black")) + facet_grid(.~MicGroup) +
  geom_line(data = WPPreds, aes(Time, kec), lwd = 1.5)

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
parsAll <- rbind(parsAll, data.frame(Study = c("Wardle and Parkinson (1990)", "Wardle and Parkinson (1990)"),
                                     Treatment = c("Bacteria", "Fungi"),
                                     yA = c(NA, NA),  Km = c(NA, NA), v = c(WPcoefs2[4], WPcoefs2[4]),
                                     m = c(NA, NA),  g = c(NA, NA), ce = c(NA, NA),  nX1 = c(WPcoefs2[1], WPcoefs2[2]),
                                     iX1 = c(NA, NA),  tX1 = c(NA, NA), te = c(NA, NA), rX1 = c(NA, NA),
                                     re = c(NA, NA),  pX1 = c(NA, NA), pe = c(NA, NA),
                                     lX1 = c(NA, NA), le = c(NA, NA)))
#=====================

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Study of Glanville et al. (2016)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
GlData = read.csv("../SoilMBVariabilityData/Glanville2016.csv")
#Visualizing the data
ggplot(GlData, aes(Time/24, kec_original)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  theme(legend.position = c(0.8, 0.6), legend.title = element_blank()) + 
  scale_fill_manual(values = c("white", "grey")) + scale_y_continuous(limits = c(0.2, 0.43)) +
  geom_hline(yintercept = 0.38, lwd = 1, lty = 2)

#Fitting the 2-pool model presented in the paper
##Glucose
nls0G<-nls(kec_original~A1*exp(-b1*Time/24)+A2*exp(-b2*Time/24),
           data = GlData, 
           subset = Substrate == "Glucose",
           start = list(A1 = 0.26, b1 = 4e-5, A2=0.1, b2=0.1))
summary(nls0G)
###Coefficients
Gcoefs<-coef(nls0G)
##Alanin
nls0A<-nls(kec_original~A1*exp(-b1*Time/24) + A2*exp(-b2*Time/24),
           data = GlData, 
           subset = Substrate == "Alanin",
           start = list(A1 = 0.26, b1 = 4e-5, A2=0.1, b2=0.1))
summary(nls0A)
###Coefficients
Acoefs<-coef(nls0A)

#Visualizing the fit
ggplot(GlData, aes(Time/24, kec_original)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  theme(legend.position = c(0.8, 0.8)) + scale_fill_manual(values = c("black", "red")) + 
  stat_function(fun = function(x){Gcoefs[1]*exp(-Gcoefs[2]*x)+Gcoefs[3]*exp(-Gcoefs[4]*x)}, lwd = 1.5, color = "red") + #Glucose
  stat_function(fun = function(x){Acoefs[1]*exp(-Acoefs[2]*x)+Acoefs[3]*exp(-Acoefs[4]*x)}, lwd = 1.5)  #Alanin

#This is the null model
nls0<-nls(kec_original~A1[Substrate]*exp(-b1[Substrate]*Time/24)+A2[Substrate]*exp(-b2[Substrate]*Time/24),
          data = GlData, 
          start = list(A1 = c(Acoefs[1], Gcoefs[1]), 
                       b1 = c(Acoefs[2], Gcoefs[2]), 
                       A2 = c(Acoefs[3], Gcoefs[3]), 
                       b2 = c(Acoefs[4], Gcoefs[4])))
summary(nls0)

#Fitting the DEB model
##Assumption 1: f = 0 because all substrate has been consumed fast
###Applying the assumption, equation to fit has a form
###kec = (nX1*MX1 + ne*ce*e(t))/(MX1 + ce*e(t))
###where e(t) = e0*exp(-v*Time)

##Assumption 2: ne = 1
###Applying assumption 2 changes equation to
###kec = (nX1*MX1 + ce*e(t))/(MX1 + ce*e(t))

##Assumption 3: MX1 = ce/4 (Henegraaf and Muller, 2001)
###Applying assumption 3 changes equation to
###kec = (nX1/4 + e(t))/(0.25 + e(t))

##Assumption 4: v is same across substrates

##Assumption 5: e0 is same across substrates
###Applying assumptions 4 and 5 lead to final form of equation
###kec = (nX1/4 + e0*exp(-v*Time))/(0.25 + e0*exp(-v*Time)) - 3 coefficients are estimated (e0, v and nX1)
nlsDEB0 <- nls(kec_original ~ (nX1/4 + e0*exp(-v*Time))/(0.25 + e0*exp(-v*Time)),
               GlData, start = list(nX1 = 0.3, e0 = 1e-3, v = 0.01))
summary(nlsDEB0)
anova(nls0, nlsDEB0) 
AICtab(nls0, nlsDEB0, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better

##Relaxing assumption 5
nlsDEB1 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v[Substrate]*Time/24))/(0.25 + e0[Substrate]*exp(-v[Substrate]*Time/24)),
               GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v = c(0.1, 0.1)))
summary(nlsDEB1)
anova(nls0, nlsDEB1)
AICtab(nls0, nlsDEB1, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better

##Assumption 6: 2 types of carriers exit
###Applying assumptions 6 lead to final form of equation
###kec = (nX1/4 + e0*exp(-v1*Time)+e0*exp(-v2*Time))/(0.25 + e0*exp(-v1*Time)+e0*exp(-v2*Time)) - 3 coefficients are estimated (e0, v and nX1)
nlsDEB2 <- nls(kec_original ~ (nX1/4 + e0*exp(-v1*Time/24)+e0*exp(-v2*Time/24))/(0.25 + e0*exp(-v1*Time/24)+e0*exp(-v2/24*Time)),
               GlData, start = list(nX1 = 0.3, e0 = 1e-3, v1 = 0.01, v2 = 0.1))
summary(nlsDEB2)
anova(nls0, nlsDEB2) 
anova(nlsDEB1, nlsDEB2)
AICtab(nls0, nlsDEB2, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better

###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24)),
               GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.1))
summary(nlsDEB3)
anova(nls0, nlsDEB3) 
anova(nlsDEB1, nlsDEB3)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better


#Visualizing the fit
DEBcoefs1<-coef(nlsDEB1)
ggplot(GlData, aes(Time/24, kec_original)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  theme(legend.position = c(0.8, 0.6), legend.title = element_blank()) + 
  scale_fill_manual(values = c("white", "grey")) + scale_y_continuous(limits = c(0.2, 0.43)) +
  #geom_hline(yintercept = 0.38, lwd = 1, lty = 2)# +
  #stat_function(fun = function(x){Gcoefs[1]*exp(-Gcoefs[2]*x)+Gcoefs[3]*exp(-Gcoefs[4]*x)}, lwd = 1.5, color = "red") + #Glucose
  #stat_function(fun = function(x){Acoefs[1]*exp(-Acoefs[2]*x)+Acoefs[3]*exp(-Acoefs[4]*x)}, lwd = 1.5)  + #Alanin
  stat_function(fun = function(x){(DEBcoefs1[1]/4 + DEBcoefs1[2]*exp(-DEBcoefs1[4]*x))/
      (0.25 + DEBcoefs1[2]*exp(-DEBcoefs1[4]*x))}, lwd = 1.5) + #Alanin
  stat_function(fun = function(x){(DEBcoefs1[1]/4 + DEBcoefs1[3]*exp(-DEBcoefs1[4]*x))/
      (0.25 + DEBcoefs1[3]*exp(-DEBcoefs1[5]*x))}, lwd = 1.5, color = "grey") #Glucose

#Visualizing the fit
DEBcoefs3<-coef(nlsDEB3)
ggplot(GlData, aes(Time/24, kec_original)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  theme(legend.position = c(0.8, 0.6), legend.title = element_blank()) + 
  scale_fill_manual(values = c("white", "grey")) + scale_y_continuous(limits = c(0.2, 0.43)) +
  #geom_hline(yintercept = 0.38, lwd = 1, lty = 2)# +
  #stat_function(fun = function(x){Gcoefs[1]*exp(-Gcoefs[2]*x)+Gcoefs[3]*exp(-Gcoefs[4]*x)}, lwd = 1.5, color = "red") + #Glucose
  #stat_function(fun = function(x){Acoefs[1]*exp(-Acoefs[2]*x)+Acoefs[3]*exp(-Acoefs[4]*x)}, lwd = 1.5)  + #Alanin
  stat_function(fun = function(x){(DEBcoefs3[1]/4 + DEBcoefs3[2]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[2]*exp(-DEBcoefs3[4]/90*x))/
      (0.25 + DEBcoefs3[2]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[2]*exp(-DEBcoefs3[4]/90*x))}, lwd = 1.5) + #Alanin
  stat_function(fun = function(x){(DEBcoefs1[1]/4 + DEBcoefs3[3]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[3]*exp(-DEBcoefs3[4]/90*x))/
      (0.25 + DEBcoefs3[3]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[3]*exp(-DEBcoefs3[4]/90*x))}, lwd = 1.5, color = "grey") #Glucose

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
parsAll <- rbind(parsAll, data.frame(Study = c("Glanville et al. (2016)", "Glanville et al. (2016)"),
                                     Treatment = c("Glucose", "Alanin"),
                                     yA = c(NA, NA),  Km = c(NA, NA), v = c(DEBcoefs1[5], DEBcoefs1[4]),
                                     m = c(NA, NA),  g = c(NA, NA), ce = c(NA, NA),  nX1 = c(DEBcoefs1[1], DEBcoefs1[1]),
                                     iX1 = c(NA, NA),  tX1 = c(NA, NA), te = c(NA, NA), rX1 = c(NA, NA),
                                     re = c(NA, NA),  pX1 = c(NA, NA), pe = c(NA, NA),
                                     lX1 = c(NA, NA), le = c(NA, NA)))
#=====================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Study of Tessier et al. (1998)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
TData = read.csv("../SoilMBVariabilityData/Tessier1998.csv")
#Visualizing the data
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + 
  xlab(expression(paste("Total organic  carbon (", mu, 'mol(C) ', g^{-1}, ')'))) + 
  theme(legend.position = c(0.8, 0.15))

summary(lm(DOC~Ctot, TData))

#Fitting the DEB model
##Assumption: de/dt = 0 because biomass is in equilibrium with substrate
###Applying the assumption
###e = f; where f = S/(Km + S) - S is total organic carbon
###kec = (0.25*nX1 + f)/(0.25 + f)

###fitting across treatments
nlsDEBT<-nls(kec~(0.25*nX1 + Ctot/(Km + Ctot))/(0.25 + Ctot/(Km + Ctot)), data = TData,
             start = list(nX1 = 0.3, Km = 10))
summary(nlsDEBT)

###fitting for each treatment separately
nlsDEBT2<-nls(kec~(0.25*nX1[Treatment] + Ctot/(Km[Treatment] + Ctot))/(0.25 + Ctot/(Km[Treatment] + Ctot)), data = TData,
             start = list(nX1 = c(0.3, 0.3), Km = c(1000, 1000)))
summary(nlsDEBT2)
anova(nlsDEBT, nlsDEBT2)
coefDEBT<-coef(nlsDEBT2)

ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + 
  xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) + 
  theme(legend.position = c(0.8, 0.15)) + 
  stat_function(fun = function(x){(0.25*coefDEBT[1] + x/(coefDEBT[3] + x))/(0.25 + x/(coefDEBT[3] + x))}, lwd = 1.5) + 
  stat_function(fun = function(x){(0.25*coefDEBT[2] + x/(coefDEBT[4] + x))/(0.25 + x/(coefDEBT[4] + x))}, lwd = 1.5, lty = 2) 

##Assumption: de/dt = 0 and 2 carriers exist
###Applying the assumption
###e = (v1*f1 + v2*f2)/(v1 + v2); where fi = S/(Kmi + S) - S is total organic carbon
###kec = (0.25*nX1 + (v1*f1 + v2*f2)/(v1 + v2))/(0.25 + (v1*f1 + v2*f2)/(v1 + v2))

###fitting across treatments
nlsDEBT2<-nls(kec~(0.25*nX1 + (v1*Ctot/(Km1 + Ctot) + v2*Ctot/(Km2 + Ctot))/(v1 + v2))/
               (0.25 + (v1*Ctot/(Km1 + Ctot) + v2*Ctot/(Km2 + Ctot))/(v1 + v2)), data = TData,
             start = list(nX1 = 0.3, v1 = 0.1, v2 = 0.3, Km1 = 10, Km2 = 100))
summary(nlsDEBT)

##Using MCMC
costT = function(data){
costIn <- function(x){return(sum((data$kec-(0.25*x[1] + (x[2]*data$Ctot/(x[3] + data$Ctot) + x[4]*data$Ctot/(x[5] + data$Ctot))/(x[2] + x[4]))/
    (0.25 + (x[2]*data$Ctot/(x[3] + data$Ctot) + x[4]*data$Ctot/(x[5] + data$Ctot))/(x[2] + x[4])))^2, na.rm = T))}

###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 0.1, 50, 0.3, 300), lower=c(0.1, 1e-4, 0.1, 1e-4, 0.1), upper=c(1, 20, 40000, 20, 40000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]), 
                   control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
 
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
   theme_min + ylab(expression(paste(italic(k[ec])~factor))) + 
   xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) + 
   theme(legend.position = c(0.8, 0.15)) + 
   stat_function(fun = function(x){(0.25*coefManure[1] + (coefManure[2]*x/(coefManure[3] + x) + coefManure[4]*x/(coefManure[4] + x))/(coefManure[2]+coefManure[4]))/
       (0.25 + (coefManure[2]*x/(coefManure[3] + x) + coefManure[4]*x/(coefManure[4] + x))/(coefManure[2]+coefManure[4]))}, lwd = 1.5) + 
  stat_function(fun = function(x){(0.25*coefUnfert[1] + (coefUnfert[2]*x/(coefUnfert[3] + x) + coefUnfert[4]*x/(coefUnfert[4] + x))/(coefUnfert[2]+coefUnfert[4]))/
      (0.25 + (coefUnfert[2]*x/(coefUnfert[3] + x) + coefUnfert[4]*x/(coefUnfert[4] + x))/(coefUnfert[2]+coefUnfert[4]))}, lwd = 1.5)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Study of Santruckova et al. (2004)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
HPData = read.csv("../SoilMBVariabilityData/Santruckova2004.csv")
#Visualizing the data
##kec factor
ggplot(HPData, aes(Time, kec)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") 
##Cmic 12
ggplot(HPData, aes(Time, Cmic12)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##Cmic 14
ggplot(HPData, aes(Time, Cmic14)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##Cumulative respiration
ggplot(HPData, aes(Time, CO214cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##Substrate concentration
ggplot(HPData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 

#Testing the volume-specific DEB model
##Parameters estimation
HPPred = read.csv("../PythonScripts/Santruckova2004Pred.csv", header = F)
colnames(HPPred) <- c("S", "CO2", "kec", "Cmic14") 
HPPred$Time = seq(0, 3, by = 0.05)

##Cumulative respiration
ggplot(HPData, aes(Time, CO214cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = HPPred, aes(Time, CO2), lwd = 1.5)

##Substrate concentration
ggplot(HPData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = HPPred, aes(Time, S), lwd = 1.5)

##Cmic 14
ggplot(HPData, aes(Time, Cmic14)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = HPPred, aes(Time, Cmic14), lwd = 1.5)

##kec factor
ggplot(HPData, aes(Time, kec)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + ylim(0.20, 0.35) +
  geom_line(data = HPPred, aes(Time, kec), lwd = 1.5)
#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
HPpars <- as.numeric(read.csv("../PythonScripts/Santruckova2004Pars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Santruckova et al. (2004)"),
                                     Treatment = c("Glucose"),
                                     yA = HPpars[1],  Km = HPpars[2], v = HPpars[3],
                                     m = HPpars[4],  g = HPpars[5], ce = HPpars[6],  nX1 = HPpars[7],
                                     iX1 = c(NA),  tX1 = c(NA), te = c(NA), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = c(NA), le = c(NA)))
#=====================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Study of Bremer and van Kessel (1990)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
BKData = read.csv("../SoilMBVariabilityData/BremerKessel1990.csv")
#Visualizing the data
##Substrate concentration
ggplot(BKData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  facet_wrap(~Treatment, scales="free")
##Cumulative respiration
ggplot(BKData, aes(Time, CO214cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  facet_wrap(~Treatment, scales="free")
##Biomass 14 !This is really biomass (without applying kec factor)
ggplot(BKData, aes(Time, Cmic14)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(MB^{14}, "C(", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  facet_wrap(~Treatment, scales="free")
#kec factor
ggplot(BKData, aes(Time, kec)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") +
  facet_wrap(~Treatment, scales="free")

#Testing the volume-specific DEB model
##Parameters estimation
BKPred = read.csv("../PythonScripts/BremerKessel1990Pred.csv", header = F)
colnames(BKPred) <- c("S", "CO2", "kec", "Cmic14") 
BKPred$Time = rep(seq(0, 7, by = 0.1), times = 3)
BKPred$Treatment = rep(c("LC", "HC", "HCHN"), each = length(seq(0, 7, by = 0.1)))

##Substrate concentration
ggplot(BKData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = BKPred, aes(Time, S), lwd = 1.5) +
  facet_wrap(~Treatment, scales="free")
##Cumulative respiration
ggplot(BKData, aes(Time, CO214cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = BKPred, aes(Time, CO2), lwd = 1.5) +
  facet_wrap(~Treatment, scales="free")
##Biomass 14
ggplot(BKData, aes(Time, Cmic14)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(MB^{14}, "C(", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = BKPred, aes(Time, Cmic14), lwd = 1.5) +
  facet_wrap(~Treatment, scales="free")
#kec factor
ggplot(BKData, aes(Time, kec)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") +
  geom_line(data = BKPred, aes(Time, kec), lwd = 1.5) +
  facet_grid(.~Treatment)

#==============From global search
##Parameters estimation
BKPredGlobal = subset(GlobalFitDE, Study == "Bremer and van Kessel (1990)")
BKPredGlobal$Time = rep(unique(BKData$Time), times = 3*4)
BKPredGlobal$Treatment = rep(c("HC", "HCHN", "LC"), each = length(unique(BKData$Time))*4)

##Substrate concentration
ggplot(subset(BKPredGlobal, Variable == "S"), aes(Time, Observation)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(aes(Time, Simulation), lwd = 1.5) +
  facet_wrap(~Treatment, scales="free")
##Cumulative respiration
ggplot(subset(BKPredGlobal, Variable == "CO2"), aes(Time, Observation)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(aes(Time, Simulation), lwd = 1.5) +
  facet_wrap(~Treatment, scales="free")
##Biomass 14
ggplot(subset(BKPredGlobal, Variable == "MBC"), aes(Time, Observation)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(MB^{14}, "C(", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(aes(Time, Simulation), lwd = 1.5) +
  facet_wrap(~Treatment, scales="free")
#kec factor
ggplot(subset(BKPredGlobal, Variable == "kec"), aes(Time, Observation)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") +
  geom_line(aes(Time, Simulation), lwd = 1.5) +
  facet_grid(.~Treatment)

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
BKparsHC <- as.numeric(read.csv("../PythonScripts/BremerHCPars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Bremer and van Kessel (1990)"),
                                     Treatment = c("High carbon"),
                                     yA = 1,  Km = BKparsHC[1], v = BKparsHC[2],
                                     m = BKparsHC[3],  g = BKparsHC[4], ce = BKparsHC[5],  nX1 = BKparsHC[6],
                                     iX1 = c(NA),   tX1 = c(NA), te = c(NA), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = c(NA), le = c(NA)))
BKparsHCHN <- as.numeric(read.csv("../PythonScripts/BremerHCHNPars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Bremer and van Kessel (1990)"),
                                     Treatment = c("High carbon/High nitrogen"),
                                     yA = 1,  Km = BKparsHCHN[1], v = BKparsHCHN[2],
                                     m = BKparsHCHN[3],  g = BKparsHCHN[4], ce = BKparsHCHN[5],  nX1 = BKparsHCHN[6],
                                     iX1 = c(NA),   tX1 = c(NA), te = c(NA), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = c(NA), le = c(NA)))
BKparsLC <- as.numeric(read.csv("../PythonScripts/BremerLCPars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Bremer and van Kessel (1990)"),
                                     Treatment = c("Low carbon"),
                                     yA = 1,  Km = BKparsLC[1], v = BKparsLC[2],
                                     m = BKparsLC[3],  g = BKparsLC[4], ce = BKparsLC[5],  nX1 = BKparsLC[6],
                                     iX1 = c(NA),   tX1 = c(NA), te = c(NA), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = c(NA), le = c(NA)))
#=====================

#Predicting ken factor
##ken factor
ggplot(BKData, aes(kec, ken)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
  theme_min + ylab(expression(paste(italic(k[en])~factor))) +
  xlab(expression(paste(italic(k[ec])~factor))) + facet_grid(.~Treatment)

##Estimating equation parameters
###ken = (nX1*CNe + CNX1*((nX1 - kec)/(kec - 1)))/(CNe + CNX1*((nX1 - kec)/(kec - 1)))
###Add kec estimates to original data frame
BKData$nX1<-NA
for(i in 1:nrow(BKData)){
  if(BKData$Treatment[i]=="HC"){
    BKData$nX1[i]<-BKparsHC[6]
  }else{
    if(BKData$Treatment[i]=="HCHN"){
      BKData$nX1[i]<-BKparsHCHN[6]
    }else{
      BKData$nX1[i]<-BKparsLC[6]
    }
  }
}
###Estimation function
kenFun<-function(data){
  objective<-function(x){
    return(sum((data$ken - (BKparsLC[6]*x[1] + x[2]*((BKparsLC[6] - data$kec)/(data$kec - 1)))/(x[1] + x[2]*((BKparsLC[6] - data$kec)/(data$kec - 1))))^2, na.rm = T))
  }
  ###Parameters estimation using MCMC
  mcmc<-modMCMC(f=objective, p=c(2, 5), 
                lower=c(0.5, 0.5), 
                upper=c(50, 50), niter=100000)
  ###Improving the estimation using differential evolution algorithm
  parDE<-DEoptim(fn=objective, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]), 
                    control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
  return(parDE$optim$bestmem)
  ##or artificial bee colony algorithm
  # parABC<-abc_optim(fn=objective, par=as.numeric(summary(mcmc)["mean",]), 
  #                   lb=as.numeric(summary(mcmc)["min",]), 
  #                   ub=as.numeric(summary(mcmc)["max",]), maxCycle = 1e6)
  # return(parABC$par)
}
#Across all treatments
kenPars<-kenFun(subset(BKData))
#Visualization
ggplot(BKData, aes(kec, ken)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
  theme_min + ylab(expression(paste(italic(k[en])~factor))) +
  xlab(expression(paste(italic(k[ec])~factor))) + 
  stat_function(fun = function(x){(BKparsLC[6]*kenPars[1] + kenPars[2]*((BKparsLC[6] - x)/(x - 1)))/(kenPars[1] + kenPars[2]*((BKparsLC[6] - x)/(x - 1)))})

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Marstorp and Witter 1999~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
MData = read.csv("../SoilMBVariabilityData/Marstorp1999.csv")
#Visualizing the data
##Substrate concentration
ggplot(MData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##Cmic 12
ggplot(MData, aes(Time, Cmic12)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  ylim(0, 15)
##Cmic 14
ggplot(MData, aes(Time, Cmic14)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##Cumulative respiration
ggplot(MData, aes(Time, CO212cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##DNA
ggplot(MData, aes(Time, DNA)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("DNA (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 

#Testing the volume-specific DEB model
##Parameters estimation
MPred = read.csv("../PythonScripts/Marstorp1999Pred.csv", header = F)
colnames(MPred) <- c("S", "CO2", "Cmic", "DNA") 
MPred$Time = seq(0, 9, by = 0.05)

##Compare to Monod model simulation
MPredM = read.csv("../PythonScripts/Marstorp1999PredM.csv", header = F)
colnames(MPredM) <- c("S", "CO2", "Cmic", "DNA") 
MPredM$Time = seq(0, 9, by = 0.05)
##Compare to Pirt model simulation
MPredP = read.csv("../PythonScripts/Marstorp1999PredP.csv", header = F)
colnames(MPredP) <- c("S", "CO2", "Cmic", "DNA") 
MPredP$Time = seq(0, 9, by = 0.05)

##Substrate concentration
ggplot(MData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = MPred, aes(Time, S), lwd = 1.5) + 
  geom_line(data = MPredM, aes(Time, S), lwd = 1.5, colour = "grey") + 
  geom_line(data = MPredP, aes(Time, S), lwd = 1.5, colour = "grey", lty = 2)
##Cumulative respiration
ggplot(MData, aes(Time, CO212cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = MPred, aes(Time, CO2), lwd = 1.5) + 
  geom_line(data = MPredM, aes(Time, CO2), lwd = 1.5, colour = "grey") +
  geom_line(data = MPredP, aes(Time, CO2), lwd = 1.5, colour = "grey", lty = 2)
##Cmic
ggplot(MData, aes(Time, Cmic12 + Cmic14)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  ylim(0, 15) + geom_line(data = MPred, aes(Time, Cmic), lwd = 1.5) + 
  geom_line(data = MPredM, aes(Time, Cmic), lwd = 1.5, color = "grey") +
  geom_line(data = MPredP, aes(Time, Cmic), lwd = 1.5, color = "grey", lty = 2)
##DNA
ggplot(MData, aes(Time, DNA)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("DNA (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = MPred, aes(Time, DNA), lwd = 1.5) + 
  geom_line(data = MPredM, aes(Time, DNA), lwd = 1.5, colour = "grey") +
  geom_line(data = MPredP, aes(Time, DNA), lwd = 1.5, colour = "grey", lty = 2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
Mpars <- as.numeric(read.csv("../PythonScripts/Marstorp1999Pars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Marstorp and Witter 1999"),
                                     Treatment = c("Glucose"),
                                     yA = Mpars[1],  Km = Mpars[2], v = Mpars[3],
                                     m = Mpars[4],  g = Mpars[5], ce = Mpars[6],  nX1 = Mpars[7],
                                     iX1 = c(MData$DNAinit[1]*Mpars[7]/MData$Cmicinit[1]),  
                                     tX1 = c(NA), te = c(NA), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = c(NA), le = c(NA)))

#=====================

#=================================
# Models comparison - F statistic
#=================================
#No. of observations
nt = nrow(MData[!is.na(MData$CO212cumul), ]) + nrow(MData[!is.na(MData$S), ]) +
  nrow(MData[!is.na(MData$DNA), ]) + nrow(MData[!is.na(MData$Cmic12), ])
#DEB model
DEBSSRes = 20.81570798 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 7.01
#Monod model
MSSRes = 40.51293538 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 6
#Pirt model
PSSRes = 44.10809363 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 7

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Plot kec and kdna as a function of relative growth rate according to estimated parameters
MPars = as.numeric(read.csv("../PythonScripts/Marstorp1999Pars.csv", header = F))
iX1 = MData$DNAinit[1]*MPars[7]/MData$Cmicinit[1]
MPars = append(MPars, iX1)
names(MPars) <- c("yA", "Km", "v", "m", "g", "ce", "nX1", "iX1")
e = seq(0, 1, by = 0.01)
muMAX = (MPars[["v"]] - MPars[["m"]]*MPars[["g"]])/(1 + MPars[["g"]]) 
mu = pmax((MPars[["v"]]*e - MPars[["m"]]*MPars[["g"]])/(e + MPars[["g"]]), 0)
muRel = pmax((MPars[["v"]]*e - MPars[["m"]]*MPars[["g"]])/(e + MPars[["g"]])/muMAX, 0)
kec = (MPars[["nX1"]]/4 + e)/(0.25 + e)
kDNA = (MPars[["iX1"]]/4)/(0.25 + e)

###Absolute values
ConversionsPreds1 <- data.frame(muRel, kec, kDNA)
ConversionsPredsL1<-melt(ConversionsPreds1, id.vars = "muRel")
ggplot(ConversionsPredsL1, aes(muRel, value)) + geom_line(aes(color = variable), lwd = 1.5, show.legend = F) +
  theme_min + xlab(expression(paste(frac(mu,mu[MAX])))) + 
  ylab(expression(paste("Conversion factor"))) + 
  facet_wrap(~variable, scales="free")
###Relative values
ConversionsPreds2 <- data.frame(muRel, kec=kec/kec[1], kDNA=kDNA/kDNA[1])
ConversionsPredsL2<-melt(ConversionsPreds2, id.vars = "muRel")
ggplot(ConversionsPredsL2, aes(muRel, value)) + geom_line(aes(color = variable), lwd = 1.5) +
  theme_min + xlab(expression(paste(frac(mu,mu[MAX])))) + 
  ylab(expression(paste(Delta, "Conversion factor"))) + 
  scale_y_log10() + theme(legend.title = element_blank(), legend.position = c(0.8, 0.5)) 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Blagodatskaya et al. 2014~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
BData = read.csv("../SoilMBVariabilityData/Blagodatskaya2014.csv")
#Visualizing the data
##Cumulative respiration
ggplot(BData, aes(Time, CO2)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) + 
  scale_fill_manual(values = c("white", "grey")) +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  theme(legend.title = element_blank(), legend.position = c(0.2, 0.8))
##DNA
ggplot(BData, aes(Time, DNA)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) + 
  scale_fill_manual(values = c("white", "grey")) +
  theme_min + ylab(expression(paste("DNA (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  theme(legend.title = element_blank(), legend.position = c(0.2, 0.8))

#Testing the volume-specific DEB model
##Parameters estimation
BPred = read.csv("../PythonScripts/Blagodatskaya2014Pred.csv", header = F)
colnames(BPred) <- c("CO2", "DNA") 
BPred$Time = rep(seq(0, 2, by = 0.01), 2)
BPred$Treatment = c(rep("Rhizosphere", times = length(seq(0, 2, by = 0.01))),
                    rep("Soil", times = length(seq(0, 2, by = 0.01))))
#Compare to Monod model
BPredM = read.csv("../PythonScripts/Blagodatskaya2014PredM.csv", header = F)
colnames(BPredM) <- c("CO2", "DNA") 
BPredM$Time = rep(seq(0, 2, by = 0.01), 2)
BPredM$Treatment = c(rep("Rhizosphere", times = length(seq(0, 2, by = 0.01))),
                    rep("Soil", times = length(seq(0, 2, by = 0.01))))
#Compare to Pirt model
BPredP = read.csv("../PythonScripts/Blagodatskaya2014PredP.csv", header = F)
colnames(BPredP) <- c("CO2", "DNA") 
BPredP$Time = rep(seq(0, 2, by = 0.01), 2)
BPredP$Treatment = c(rep("Rhizosphere", times = length(seq(0, 2, by = 0.01))),
                     rep("Soil", times = length(seq(0, 2, by = 0.01))))

##Cumulative respiration
ggplot(BData, aes(Time, CO2)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) + 
  scale_fill_manual(values = c("white", "grey")) +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  theme(legend.title = element_blank(), legend.position = c(0.2, 0.8)) + xlim(0, 1.6) + 
  geom_line(data = BPred, aes(Time, CO2, color = Treatment)) + scale_color_manual(values = c("black", "grey")) +
  geom_line(data = BPredM, aes(Time, CO2), lty = 2) +
  geom_line(data = BPredP, aes(Time, CO2), lty = 3)
##DNA
ggplot(BData, aes(Time, DNA)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) + 
  scale_fill_manual(values = c("white", "grey")) +
  theme_min + ylab(expression(paste("DNA (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  theme(legend.title = element_blank(), legend.position = c(0.2, 0.8)) + xlim(0, 1.6) +
  geom_line(data = BPred, aes(Time, DNA, color = Treatment)) + scale_color_manual(values = c("black", "grey")) +
  geom_line(data = BPredM, aes(Time, DNA, color = Treatment), lty = 2) +
  geom_line(data = BPredP, aes(Time, DNA, color = Treatment), lty = 3)

#=====================

#=================================
# Models comparison - F statistic
#=================================
#~~~~~~~~~~~~~~Rhizosphere soil
#No. of observations
nt = nrow(BData[(BData$Treatment == "Rhizosphere" & !is.na(BData$CO2)), ]) + 
  nrow(BData[(BData$Treatment == "Rhizosphere" & !is.na(BData$DNA)), ])
#DEB model
DEBSSRes = 2.87709487 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 7
#Monod model
MSSRes = 3.75097875 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 5
#Pirt model
PSSRes = 3.75062408 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 6

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~Root free soil
#No. of observations
nt = nrow(BData[(BData$Treatment != "Rhizosphere" & !is.na(BData$CO2)), ]) + 
  nrow(BData[(BData$Treatment != "Rhizosphere" & !is.na(BData$DNA)), ])
#DEB model
DEBSSRes = 2.59638842 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 7
#Monod model
MSSRes = 4.18352029 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 5
#Pirt model
PSSRes = 4.21367685 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 6

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
BparsR <- as.numeric(read.csv("../PythonScripts/bla_debparsR.csv", header = F))
BparsS <- as.numeric(read.csv("../PythonScripts/bla_debparsS.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Blagodatskaya et al. (2014)"),
                                     Treatment = c("Rhizosphere", "Soil"),
                                     yA = c(BparsR[1], BparsS[1]),  Km = c(BparsR[2], BparsS[2]), v = c(BparsR[3], BparsS[3]),
                                     m = c(BparsR[4], BparsS[4]),  g = c(BparsR[5], BparsS[5]), ce = c(BparsR[6], BparsS[6]),  nX1 = c(NA, NA),
                                     iX1 = c(BparsR[7], BparsS[7]),  
                                     tX1 = c(NA, NA), te = c(NA, NA), rX1 = c(NA, NA),
                                     re = c(NA, NA),  pX1 = c(NA, NA), pe = c(NA, NA),
                                     lX1 = c(NA, NA), le = c(NA, NA)))

#=====================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Ziegler et al. (2005)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
ZData = read.csv("../SoilMBVariabilityData/Ziegler2005.csv")
#Visualizing the data
##MBC
ggplot(ZData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##Cumulative respiration
ggplot(ZData, aes(Time, CO2cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##PLFA
ggplot(ZData, aes(Time, PLFA)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("PLFA (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)")

#================================================================
#Testing the volume-specific DEB model
#================================================================
##Parameters estimation
ZPred = read.csv("../PythonScripts/Ziegler2005Pred.csv", header = F)
colnames(ZPred) <- c("S", "e", "X1", "B", "CO2cumul", "PLFA") 
ZPred$Time = seq(0, 2, by = 0.05)

##Compare to Monod model
ZPredM = read.csv("../PythonScripts/Ziegler2005PredM.csv", header = F)
colnames(ZPredM) <- c("S", "CO2cumul", "PLFA") 
ZPredM$Time = seq(0, 2, by = 0.05)

##Compare to Pirt model
ZPredP = read.csv("../PythonScripts/Ziegler2005PredP.csv", header = F)
colnames(ZPredP) <- c("S", "CO2cumul", "PLFA") 
ZPredP$Time = seq(0, 2, by = 0.05)

##Visualizing the fit
##Glucose
ggplot(ZData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = ZPred, aes(Time, S), lwd = 1.5) +
  geom_line(data = ZPredM, aes(Time, S), lwd = 1.5, colour = "grey") +
  geom_line(data = ZPredP, aes(Time, S), lwd = 1.5, colour = "grey", lty = 2) 
##Cumulative respiration
ggplot(ZData, aes(Time, CO2cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = ZPred, aes(Time, CO2cumul), lwd = 1.5) +
  geom_line(data = ZPredM, aes(Time, CO2cumul), lwd = 1.5, colour = "grey") +
  geom_line(data = ZPredP, aes(Time, CO2cumul), lwd = 1.5, colour = "grey", lty = 2) 
##PLFA
ggplot(ZData, aes(Time, PLFA)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("PLFA (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = ZPred, aes(Time, PLFA), lwd = 1.5) +
  geom_line(data = ZPredM, aes(Time, PLFA), lwd = 1.5, colour = "grey") +
  geom_line(data = ZPredP, aes(Time, PLFA), lwd = 1.5, colour = "grey", lty = 2) 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
Zpars <- as.numeric(read.csv("../PythonScripts/Ziegler2005Pars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Ziegler et al. (2005)"),
                                     Treatment = c("Glucose"),
                                     yA = Zpars[1],  Km = Zpars[2], v = Zpars[3],
                                     m = Zpars[4],  g = Zpars[5], ce = Zpars[6],  nX1 = c(NA),
                                     iX1 = c(NA), tX1 = c(NA), te = c(NA), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = Zpars[7], le = Zpars[8]))

#=====================

#=================================
# Models comparison - F statistic
#=================================
#No. of observations
nt = nrow(ZData[(!is.na(ZData$CO2cumul)), ]) +
  nrow(ZData[(!is.na(ZData$S)), ]) + 
  nrow(ZData[(!is.na(ZData$PLFA)), ])
#DEB model
DEBSSRes = 5.90867622 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 8
#Monod model
MSSRes = 15.37224822 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 5
#Pirt model
PSSRes = 10.28259583#Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 6

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Tsai et al. (1997)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
TData = read.csv("../SoilMBVariabilityData/Tsai1997.csv")
#Visualizing the data
##MBC
ggplot(TData, aes(Time, Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  facet_grid(.~Treatment)
##Cumulative respiration
ggplot(TData, aes(Time, CO2cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  facet_grid(.~Treatment)
##ATP
ggplot(TData, aes(Time, ATP*1000)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP (nmol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  facet_grid(.~Treatment)
##ATP to Cmic
ggplot(TData, aes(Time, ATP*1000/Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP (nmol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  facet_grid(.~Treatment)

#================================================================
#Testing the volume-specific DEB model
#================================================================
##Parameters estimation
TPred = read.csv("../PythonScripts/Tsai1997Pred.csv", header = F)
colnames(TPred) <- c("CO2", "Cmic", "ATP") 
TPred$Time = seq(0, 9, by = 0.05)
TPred$Treatment <- c(rep("HG", times = length(seq(0, 9, by = 0.05))),
                     rep("LG", times = length(seq(0, 9, by = 0.05))))

##Compare to Monod model
TPredM = read.csv("../PythonScripts/Tsai1997PredM.csv", header = F)
colnames(TPredM) <- c("CO2", "Cmic", "ATP") 
TPredM$Time = seq(0, 9, by = 0.05)
TPredM$Treatment <- c(rep("HG", times = length(seq(0, 9, by = 0.05))),
                     rep("LG", times = length(seq(0, 9, by = 0.05))))
##Compare to Pirt model
TPredP = read.csv("../PythonScripts/Tsai1997PredP.csv", header = F)
colnames(TPredP) <- c("CO2", "Cmic", "ATP") 
TPredP$Time = seq(0, 9, by = 0.05)
TPredP$Treatment <- c(rep("HG", times = length(seq(0, 9, by = 0.05))),
                      rep("LG", times = length(seq(0, 9, by = 0.05))))

##Visualizing the fit
##MBC
ggplot(TData, aes(Time, Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = TPred, aes(Time, Cmic), lwd = 1.5) +
  geom_line(data = TPredM, aes(Time, Cmic), lwd = 1.5, colour = "grey") +
  geom_line(data = TPredP, aes(Time, Cmic), lwd = 1.5, colour = "grey", lty = 2) +
  facet_grid(.~Treatment)
##Cumulative respiration
ggplot(TData, aes(Time, CO2cumul)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = TPred, aes(Time, CO2), lwd = 1.5) +
  geom_line(data = TPredM, aes(Time, CO2), lwd = 1.5, colour = "grey") +
  geom_line(data = TPredP, aes(Time, CO2), lwd = 1.5, colour = "grey", lty = 2) +
  facet_grid(.~Treatment)
##ATP
ggplot(TData, aes(Time, ATP*1000)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP (nmol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = TPred, aes(Time, ATP*1000), lwd = 1.5) +
  geom_line(data = TPredM, aes(Time, ATP*1000), lwd = 1.5, colour = "grey") +
  geom_line(data = TPredP, aes(Time, ATP*1000), lwd = 1.5, colour = "grey", lty = 2) +
  facet_grid(.~Treatment)

##ATP to Cmic
ggplot(TData, aes(Time, ATP*1000/Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP/MBC (mmol", mol^{-1},")"))) + xlab("Time (days)") +
  geom_line(data = TPred, aes(Time, ATP*1000/Cmic), lwd = 1.5) +
  geom_line(data = TPredM, aes(Time, ATP*1000/Cmic), lwd = 1.5, colour = "grey") +
  geom_line(data = TPredP, aes(Time, ATP*1000/Cmic), lwd = 1.5, colour = "grey", lty = 2) +
  facet_grid(.~Treatment)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
Tpars <- as.numeric(read.csv("../PythonScripts/Tsai1997Pars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Tsai et al. (1997)"),
                                     Treatment = c("Glucose"),
                                     yA = Tpars[1],  Km = Tpars[2], v = Tpars[3],
                                     m = Tpars[4],  g = Tpars[5], ce = Tpars[6],  nX1 = Tpars[7],
                                     iX1 = c(NA), tX1 = c(Tpars[8]), te = c(Tpars[9]), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = c(NA), le = c(NA)))

#=====================

#=================================
# Models comparison - F statistic
#=================================
#No. of observations
nt = nrow(TData[(!is.na(TData$CO212cumul)), ]) +
  nrow(TData[(!is.na(TData$ATP)), ]) + 
  nrow(TData[(!is.na(TData$Cmic)), ])
#DEB model
DEBSSRes = 12.934425538230702 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 8
#Monod model
MSSRes = 14.008509347822782 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 6
#Pirt model
PSSRes = 13.8187411195515823#Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 7

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Joergensen and Raubuch (2002)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
JData = read.csv("../SoilMBVariabilityData/Joergensen2002.csv")
#Visualizing the data
##Glucose
ggplot(JData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##MBC
ggplot(JData, aes(Time, Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##ATP
ggplot(JData, aes(Time, ATP*1000)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP (nmol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 

##ATP to Cmic
ggplot(JData, aes(Time, ATP*1000/Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP (nmol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 

#================================================================
#Testing the volume-specific DEB model
#================================================================
##Parameters estimation
JPred = read.csv("../PythonScripts/Joergensen2002Pred.csv", header = F)
colnames(JPred) <- c("S", "e", "X1", "B", "Cmic", "ATP") 
JPred$Time = seq(0, 8, by = 0.05)

##Compare to Monod model
JPredM = read.csv("../PythonScripts/Joergensen2002PredM.csv", header = F)
colnames(JPredM) <- c("S", "Cmic", "ATP") 
JPredM$Time = seq(0, 8, by = 0.05)

##Compare to Pirt model
JPredP = read.csv("../PythonScripts/Joergensen2002PredP.csv", header = F)
colnames(JPredP) <- c("S", "Cmic", "ATP") 
JPredP$Time = seq(0, 8, by = 0.05)


##Visualizing the fit
##Glucose
ggplot(JData, aes(Time, S)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Glucose (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = JPred, aes(Time, S), lwd = 1.5) +
  geom_line(data = JPredM, aes(Time, S), lwd = 1.5, colour = "grey") +
  geom_line(data = JPredP, aes(Time, S), lwd = 1.5, colour = "grey", lty = 2) 
##MBC
ggplot(JData, aes(Time, Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = JPred, aes(Time, Cmic), lwd = 1.5) +
  geom_line(data = JPredM, aes(Time, Cmic), lwd = 1.5, colour = "grey") +
  geom_line(data = JPredP, aes(Time, Cmic), lwd = 1.5, colour = "grey", lty = 2) 
##ATP
ggplot(JData, aes(Time, ATP*1000)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = JPred, aes(Time, ATP*1000), lwd = 1.5) +
  geom_line(data = JPredM, aes(Time, ATP*1000), lwd = 1.5, colour = "grey") +
  geom_line(data = JPredP, aes(Time, ATP*1000), lwd = 1.5, colour = "grey", lty = 2) 

##ATP to Cmic
ggplot(JData, aes(Time, ATP*1000/Cmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("ATP (nmol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = JPred, aes(Time, ATP*1000/Cmic), lwd = 1.5) +
  geom_line(data = JPredM, aes(Time, ATP*1000/Cmic), lwd = 1.5, colour = "grey") +
  geom_line(data = JPredP, aes(Time, ATP*1000/Cmic), lwd = 1.5, colour = "grey", lty = 2) 

##e
ggplot(JPred, aes(Time, e)) + geom_line() +
  theme_min + ylab(expression(paste("e (unitless)"))) + xlab("Time (days)") 

JData$e <- with(JData, 0.25*((ATP/Cmic)*2.78558533e-01 - 1.92778569e-03)/(1.44641993e-04 - (ATP/Cmic)))

ggplot(JData, aes(Time, e)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("e (unitless)"))) + xlab("Time (days)")
ggplot(JData, aes(e, Cmic/Nmic)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + xlab(expression(paste("e (unitless)"))) + ylab("MBC/MBN (mol/mol)")

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
Jpars <- as.numeric(read.csv("../PythonScripts/Joergensen2002Pars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = c("Joergensen and Raubuch (2002)"),
                                     Treatment = c("Glucose"),
                                     yA = Jpars[1],  Km = Jpars[2], v = Jpars[3],
                                     m = Jpars[4],  g = Jpars[5], ce = Jpars[6],  nX1 = Jpars[7],
                                     iX1 = c(NA),  tX1 = c(Jpars[8]), te = c(Jpars[9]), rX1 = c(NA),
                                     re = c(NA),  pX1 = c(NA), pe = c(NA),
                                     lX1 = c(NA), le = c(NA)))

#=====================

#=================================
# Models comparison - F statistic
#=================================
#No. of observations
nt = nrow(JData[(!is.na(JData$S)), ]) +
  nrow(JData[(!is.na(JData$ATP)), ]) + 
  nrow(JData[(!is.na(JData$Cmic)), ])
#DEB model
DEBSSRes = 2.76882041 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 9
#Monod model
MSSRes = 4.93653848 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 6
#Pirt model
PSSRes = 4.89165775#Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 7

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Nannipieri et al. (1977)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
NData = read.csv("../SoilMBVariabilityData/Nannipieri1977.csv")
#Visualizing the data
##CO2
ggplot(NData, aes(Time, CO2)) + geom_point(cex=6, pch=21, fill = "grey") + facet_grid(.~Treatment) +
  theme_min + ylab(expression(paste("Cumulative respoiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 
##Biomass
ggplot(NData, aes(Time, W/1000)) + geom_point(cex=6, pch=21, fill = "grey") + facet_grid(.~Treatment) +
  theme_min + ylab(expression(paste("Biomass (", "mg ", g^{-1}, ")"))) + xlab("Time (days)") 
##ATP
ggplot(NData, aes(Time, ATP*1000)) + geom_point(cex=6, pch=21, fill = "grey") + facet_grid(.~Treatment) +
  theme_min + ylab(expression(paste("ATP (nmol(C) ", g^{-1}, ")"))) + xlab("Time (days)") 

#================================================================
#Testing the volume-specific DEB model
#================================================================
##Parameters estimation
NPred = read.csv("../PythonScripts/Nannipieri1977Pred.csv", header = F)
colnames(NPred) <- c("S", "e", "X1", "W", "B", "CO2", "ATP") 
NPred$Time = rep(seq(0, 3.55, by = 0.05), 3)
NPred$Treatment = c(rep("A", times = length(seq(0, 3.55, by = 0.05))),
                    rep("B", times = length(seq(0, 3.55, by = 0.05))),
                    rep("C", times = length(seq(0, 3.55, by = 0.05))))

##Compare to Monod model
NPredM = read.csv("../PythonScripts/Nannipieri1977PredM.csv", header = F)
colnames(NPredM) <- c("CO2", "W", "ATP") 
NPredM$Time = rep(seq(0, 3.55, by = 0.05), 3)
NPredM$Treatment = c(rep("A", times = length(seq(0, 3.55, by = 0.05))),
                    rep("B", times = length(seq(0, 3.55, by = 0.05))),
                    rep("C", times = length(seq(0, 3.55, by = 0.05))))

##Compare to Pirt model
NPredP = read.csv("../PythonScripts/Nannipieri1977PredP.csv", header = F)
colnames(NPredP) <- c("CO2", "W", "ATP") 
NPredP$Time = rep(seq(0, 3.55, by = 0.05), 3)
NPredP$Treatment = c(rep("A", times = length(seq(0, 3.55, by = 0.05))),
                     rep("B", times = length(seq(0, 3.55, by = 0.05))),
                     rep("C", times = length(seq(0, 3.55, by = 0.05))))

##Visualizing the fit
##CO2
ggplot(NData, aes(Time, CO2)) + geom_point(cex=6, pch=21, fill = "grey") + facet_grid(.~Treatment) +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = NPred, aes(Time, CO2), lwd = 1.5) +
  geom_line(data = NPredM, aes(Time, CO2), lwd = 1.5, colour = "grey") +
  geom_line(data = NPredP, aes(Time, CO2), lwd = 1.5, colour = "grey", lty = 2) 
##Biomass
ggplot(NData, aes(Time, W/1000)) + geom_point(cex=6, pch=21, fill = "grey") + facet_grid(.~Treatment) +
  theme_min + ylab(expression(paste("Biomass (mg ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = NPred, aes(Time, W/1000), lwd = 1.5) +
  geom_line(data = NPredM, aes(Time, W/1000), lwd = 1.5, colour = "grey") +
  geom_line(data = NPredP, aes(Time, W/1000), lwd = 1.5, colour = "grey", lty = 2) 
##ATP
ggplot(NData, aes(Time, ATP*1000)) + geom_point(cex=6, pch=21, fill = "grey") + facet_grid(.~Treatment) +
  theme_min + ylab(expression(paste("Flush (", mu, "mol(C) ", g^{-1}, ")"))) + xlab("Time (days)") +
  geom_line(data = NPred, aes(Time, ATP*1000), lwd = 1.5) +
  geom_line(data = NPredM, aes(Time, ATP*1000), lwd = 1.5, colour = "grey") +
  geom_line(data = NPredP, aes(Time, ATP*1000), lwd = 1.5, colour = "grey", lty = 2) 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
Npars <- as.data.frame(read.csv("../PythonScripts/Nannipieri1977Pars.csv", header = F))
parsAll <- rbind(parsAll, data.frame(Study = rep(c("Nannipieri et al. (1977)"), 3),
                                     Treatment = c("Glucose"),
                                     yA = as.numeric(Npars[, 1]),  Km = as.numeric(Npars[, 2]), v = as.numeric(Npars[, 3]),
                                     m = as.numeric(Npars[, 4]),  g = as.numeric(Npars[, 5]), ce = as.numeric(Npars[, 6]),  nX1 = c(NA, NA, NA),
                                     iX1 = c(NA, NA, NA),  tX1 = as.numeric(Npars[, 7]), te = as.numeric(Npars[, 8]), rX1 = c(NA, NA, NA),
                                     re = c(NA, NA, NA),  pX1 = c(NA, NA, NA), pe = c(NA, NA, NA),
                                     lX1 = c(NA, NA, NA), le = c(NA, NA, NA)))

#=====================

#=================================
# Models comparison - F statistic
#=================================
#Treatment A
#No. of observations
nt = nrow(NData[(!is.na(NData$CO2 & NData$Treatment == "A")), ]) +
  nrow(NData[(!is.na(NData$ATP & NData$Treatment == "A")), ]) + 
  nrow(NData[(!is.na(NData$W & NData$Treatment == "A")), ])
#DEB model
DEBSSRes = 3.81255072 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 10
#Monod model
MSSRes = 2.48640062 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 6
#Pirt model
PSSRes = 10.41853908#Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 7

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#Treatment B
#DEB model
DEBSSRes = 4.23315418 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 10
#Monod model
MSSRes = 15.11382047 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 6
#Pirt model
PSSRes = 10.26760821#Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 7

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#Treatment C
#DEB model
DEBSSRes = 3.95964228 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
DEBpar = 10
#Monod model
MSSRes = 15.75592723 #Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Mpar = 6
#Pirt model
PSSRes = 10.5125575#Weighted residual sum of squares from python (all variables standardized to 0 mean and unit variance)
Ppar = 7

#DEB vs Monod
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar)

####associated p value
pf(q=(MSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Mpar), 
   df1=(DEBpar - Mpar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#DEB vs Pirt
####F value =  (M1ss - M2ss)*(nt - M2p)/M2ss/(M2p - M1p)
(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar)

####associated p value
pf(q=(PSSRes - DEBSSRes)*(nt - DEBpar)/DEBSSRes/(DEBpar - Ppar), 
   df1=(DEBpar - Ppar), 
   df2=(nt - DEBpar), 
   lower.tail=F)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Global optimization~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#==============Model parameters and predictions are derived across all studies analyzed above
#Read predictions calculated in Python
GlobalFitDE<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/GlobalSearchSpecific/globalResultsDE.csv")
GlobalFitDE<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/Trials/GS_v12/globalResultsDE.csv")
GlobalFitDA<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/GlobalSearchSpecific/globalResultsDA.csv")
GlobalFitDA<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/Trials/GS_v12/globalResultsDA.csv")

ggplot(GlobalFitDE, aes(Observation, Simulation)) + geom_point(cex = 6, aes(color = Study)) + theme_min + 
  facet_wrap(~Variable, scales = "free") + geom_abline(intercept = 0, slope = 1)
ggplot(GlobalFitDA, aes(Observation, Simulation)) + geom_point(cex = 6, aes(color = Study)) + theme_min + 
  facet_wrap(.~Variable, scales = "free") + geom_abline(intercept = 0, slope = 1)

#Read predictions calculated in Python
GlobalFitGDE<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/GlobalSearchGeneralized/globalResultsDEGeneralized.csv")
GlobalFitGDA<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/GlobalSearchGeneralized/globalResultsDAGeneralized.csv")

ggplot(GlobalFitGDE, aes(Observation, Simulation)) + geom_point(cex = 6, aes(color = Study)) + theme_min + 
  facet_wrap(~Variable, scales = "free") + geom_abline(intercept = 0, slope = 1)
ggplot(GlobalFitGDA, aes(Observation, Simulation)) + geom_point(cex = 6, aes(color = Study)) + theme_min + 
  facet_wrap(~Variable, scales = "free") + geom_abline(intercept = 0, slope = 1)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Pitt and Bull 1982~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
PBData <- read.csv("../SoilMBVariabilityData/Pitt1981.csv")
#Visualizing the data
ggplot(PBData, aes(SGR, ATP)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + facet_grid(.~Treatment) + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("ATP (", mu, "mol ", g(Biomass)^{-1}, ")")))

##Equation parameters estimation
###ATP = ne*g*((-SGR - m)/(SGR - v))/(0.25 + g*((-SGR - m)/(SGR - v)))
PBfun <- function(data){
  objective<-function(x){
    return(sum((data$ATP - (x[1]*x[2]*((-data$SGR - x[3])/(data$SGR - x[4]))/(0.25 + x[2]*((-data$SGR - x[3])/(data$SGR - x[4])))))^2))
  }
  ###Parameters estimation using MCMC
  mcmc<-modMCMC(f=objective, p=c(10, 0.1, 1e-5, 0.1), 
                lower=c(1e-3, 1e-3, 1e-15, 1e-3), 
                upper=c(1000, 10, 1, 10), niter=100000)
  ###Improving the estimation using differential evolution algorithm
  # parDE<-DEoptim(fn=objective, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]), 
  #                    control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
  # return(parDE$optim$bestmem)
  ##or artificial bee colony algorithm
  parABC<-abc_optim(fn=objective, par=as.numeric(summary(mcmc)["mean",]), 
                       lb=as.numeric(summary(mcmc)["min",]), 
                       ub=as.numeric(summary(mcmc)["max",]), maxCycle = 1e6)
  return(parABC$par)
}

##Climited conditions
parClim <- PBfun(subset(PBData, Treatment == "Climited"))
##Nlimited conditions
parNlim <- PBfun(subset(PBData, Treatment == "Nlimited"))

##Visualize predictions
PBpreds <- data.frame(SGR = rep(seq(0, 0.25, 0.01), 2),
                      Treatment = c(rep("Climited", length(seq(0, 0.25, 0.01))),
                                    rep("Nlimited", length(seq(0, 0.25, 0.01)))),
                      ATP = c((parClim[1]*parClim[2]*((-seq(0, 0.25, 0.01) - parClim[3])/(seq(0, 0.25, 0.01) - parClim[4]))/(0.25 + parClim[2]*((-seq(0, 0.25, 0.01) - parClim[3])/(seq(0, 0.25, 0.01) - parClim[4])))),
                              (parNlim[1]*parNlim[2]*((-seq(0, 0.25, 0.01) - parNlim[3])/(seq(0, 0.25, 0.01) - parNlim[4]))/(0.25 + parNlim[2]*((-seq(0, 0.25, 0.01) - parNlim[3])/(seq(0, 0.25, 0.01) - parNlim[4]))))))


ggplot(PBData, aes(SGR, ATP)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + facet_grid(.~Treatment) + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("ATP (", mu, "mol ", g(Biomass)^{-1}, ")"))) +
  geom_line(data = PBpreds, aes(SGR, ATP))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Chapman and Atkinson~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
ChData <- read.csv("../SoilMBVariabilityData/Chapman.csv")
#Visualizing the data
##Cell mass
ggplot(ChData, aes(SGR, ATP)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("ATP (mmol m", g(Protein)^{-1}, ")")))

#==================================================================================================
##Parameters estimation
###ATP = z*((-SGR - m)/(SGR - v))/(y + d*((-SGR - m)/(SGR - v)))
###Coefficients: z, y, d, m, v
#==================================================================================================
ChFun <- function(...){
  objective<-function(x){
    return(sum((ChData$ATP - x[1]*((-ChData$SGR - x[2])/(ChData$SGR - x[3]))/
      (x[4] + x[5]*((-ChData$SGR - x[2])/(ChData$SGR - x[3]))))^2))
  }
  ###Parameters estimation using MCMC
  mcmc<-modMCMC(f=objective, p=c(1, 1e-5, 0.1, 1 , 1), 
                lower=c(1e-3, 1e-15, 1e-3, 1e-3, 1e-3), 
                upper=c(1e6, 1, 10, 10, 1e3), niter=100000)
  ###Improving the estimation using differential evolution algorithm
  # parDE<-DEoptim(fn=objective, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]), 
  #                    control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
  # return(parDE$optim$bestmem)
  ##or artificial bee colony algorithm
  parABC<-abc_optim(fn=objective, par=as.numeric(summary(mcmc)["mean",]), 
                    lb=as.numeric(summary(mcmc)["min",]), 
                    ub=as.numeric(summary(mcmc)["max",]), maxCycle = 1e6)
  return(parABC$par)
}

Chpar <- ChFun()

#Visualizing the predictions
ggplot(ChData, aes(SGR, ATP)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("ATP (mmol m", g(Protein)^{-1}, ")"))) +
  stat_function(fun = function(x){
    Chpar[1]*((-x - Chpar[2])/(x - Chpar[3]))/(Chpar[4] + Chpar[5]*((-x - Chpar[2])/(x - Chpar[3])))
  })
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Dourado and Lercher 2020~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
DLData <- read.csv("../SoilMBVariabilityData/Dourado2020.csv")
#Visualizing the data
##RNA relative abundance within the cell
ggplot(DLData, aes(SGR, RNA)) + geom_point(cex = 6, pch = 21, aes(fill = Species)) +
  theme_min + scale_fill_manual(values = c("white", "grey")) +
  xlim(0, 2) + ylim(0, 0.3) + theme(legend.title = element_blank(), legend.position = c(0.8, 0.15)) +
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("RNA abundance (unitless)")))

#==================================================================================================
##Parameters estimation
###kRNA = (0.25*rX1 + re*g^((-SGR - m)/(SGR - v)))/(0.25 + g^((-SGR - m)/(SGR - v)))
###Coefficients: rX1, re, g, m, v
#==================================================================================================
DLFun <- function(data){
  objective<-function(x){
    return(sum((data$RNA - (0.25*x[1] + x[2]*x[3]^((-data$SGR - x[4])/(data$SGR - x[5])))/(0.25 + x[3]^((-data$SGR - x[4])/(data$SGR - x[5]))))^2, na.rm = T))
  }
  ###Parameters estimation using MCMC
  mcmc<-modMCMC(f=objective, p=c(0.07, 0.24, 0.1, 1e-3 , 0.1), 
                lower=c(0, 0, 1e-3, 1e-15, 1e-3), 
                upper=c(1, 1, 10, 1, 1e3), niter=100000)
  ###Improving the estimation using differential evolution algorithm
  parDE<-DEoptim(fn=objective, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]), 
                    control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
  return(parDE$optim$bestmem)
  ##or artificial bee colony algorithm
#   parABC<-abc_optim(fn=objective, par=as.numeric(summary(mcmc)["mean",]), 
#                     lb=as.numeric(summary(mcmc)["min",]), 
#                     ub=as.numeric(summary(mcmc)["max",]), maxCycle = 1e6)
#   return(parABC$par)
}

DLparEColi <- DLFun(DLData[DLData$Species == "E. Coli", ])
DLparSC <- DLFun(DLData[DLData$Species != "E. Coli", ])

#Visualizing the predictions
ggplot(DLData, aes(SGR, RNA)) + geom_point(cex = 6, pch = 21, aes(fill = Species)) +
  theme_min + scale_fill_manual(values = c("white", "grey")) +
  xlim(0, 2) + ylim(0, 0.3) + theme(legend.title = element_blank(), legend.position = c(0.8, 0.15)) +
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("RNA abundance (unitless)"))) +
  stat_function(fun = function(x){(0.25*DLparEColi[1] + DLparEColi[2]*DLparEColi[3]^((-x - DLparEColi[4])/(x - DLparEColi[5])))/(0.25 + DLparEColi[3]^((-x - DLparEColi[4])/(x - DLparEColi[5])))}) +
  stat_function(fun = function(x){(0.25*DLparSC[1] + DLparSC[2]*DLparSC[3]^((-x - DLparSC[4])/(x - DLparSC[5])))/(0.25 + DLparSC[3]^((-x - DLparSC[4])/(x - DLparSC[5])))})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Herbert 1961~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
HEData <- read.csv("../SoilMBVariabilityData/Herbert1961.csv")
#Visualizing the data
##Cell mass
ggplot(HEData, aes(SGR, Mass)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("Cell mass (picograms)")))
##DNA
ggplot(HEData, aes(SGR, DNA)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("DNA abundance (unitless)")))
##DNA
ggplot(HEData, aes(SGR, RNA)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("RNA abundance (unitless)")))
##Proteins
ggplot(HEData, aes(SGR, Protein)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("Proteins abundance (unitless)")))

#==================================================================================================
##Parameters estimation
###Mass = X1*ce*(0.25 + g*((-SGR - m)/(SGR - v))); X1*ce = z
###DNA = 0.25*iX1/(0.25 + g*((-SGR - m)/(SGR - v)))
###RNA = (0.25*rX1 + re*g*((-SGR - m)/(SGR - v)))/(0.25 + g*((-SGR - m)/(SGR - v)))
###Protein = (0.25*pX1 + pe*g*((-SGR - m)/(SGR - v)))/(0.25 + g*((-SGR - m)/(SGR - v)))
###Coefficients: z, g, m, v, iX1, rX1, re, pX1, pe
#==================================================================================================
###Starting with the mass
HEmass <- function(...){
  objective<-function(x){
   return(sum((HEData$Mass - x[1]*(0.25 + x[2]*((-HEData$SGR - x[3])/(HEData$SGR - x[4]))))^2))
  }
  ###Parameters estimation using MCMC
  mcmc<-modMCMC(f=objective, p=c(1, 0.1, 1e-5, 0.8), 
                lower=c(1e-3, 1e-3, 1e-15, 1e-3), 
                upper=c(1e6, 10, 1, 10), niter=100000)
  ###Improving the estimation using differential evolution algorithm
  # parDE<-DEoptim(fn=objective, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]), 
  #                    control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
  # return(parDE$optim$bestmem)
  ##or artificial bee colony algorithm
  parABC<-abc_optim(fn=objective, par=as.numeric(summary(mcmc)["mean",]), 
                    lb=as.numeric(summary(mcmc)["min",]), 
                    ub=as.numeric(summary(mcmc)["max",]), maxCycle = 1e6)
  return(parABC$par)
}

HEmasspar <- HEmass()

##Visualize predictions
HEPreds <- data.frame(SGR = seq(0, max(HEData$SGR), length.out = 50))
HEPreds$Mass <- with(HEPreds, HEmasspar[1]*(0.25 + HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4]))))

##Cell mass
ggplot(HEData, aes(SGR, Mass)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) + ylim(0, 0.7) +
  ylab(expression(paste("Cell mass (picograms)"))) +
  geom_line(data = HEPreds, aes(SGR, Mass), lwd = 1.5)

#===========
# DNA
#===========
nlsDNA<-nls(DNA~0.25*iX1/(0.25 + HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4]))),
            HEData, start = list(iX1 = 0.005))
summary(nlsDNA)
##Visualize predictions
HEPreds$DNA <- with(HEPreds, 0.25*coef(nlsDNA)/(0.25 + HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4]))))

##DNA
ggplot(HEData, aes(SGR, DNA)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("DNA abundance (unitless)"))) + 
  geom_line(data = HEPreds, aes(SGR, DNA), lwd = 1.5) 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Compare to Marstorp and Witter study
SGRMAX = (HEmasspar[4] - HEmasspar[3]*HEmasspar[2])/(1 + HEmasspar[2]) 
HEData$SGRrel <- HEData$SGR/SGRMAX
HEPreds$SGRrel <- HEPreds$SGR/SGRMAX

ggplot(HEData, aes(SGRrel, DNA)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste(frac(mu,mu[MAX])))) +
  ylab(expression(paste("DNA abundance (unitless)"))) + 
  geom_line(data = HEPreds, aes(SGRrel, DNA), lwd = 1.5) +
  geom_line(data = subset(ConversionsPredsL1, variable == "kDNA"),
              aes(muRel, value), colour = "grey", lwd = 1.5)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#===========
# RNA
#===========
nlsRNA<-nls(RNA~(0.25*rX1 + re*HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4])))/
              (0.25 + HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4]))),
            HEData, start = list(rX1 = 0.1, re = 0.4))
summary(nlsRNA)
##Visualize predictions
HEPreds$RNA <- with(HEPreds, (0.25*coef(nlsRNA)[1] + coef(nlsRNA)[2]*HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4])))/
                      (0.25 + HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4]))))

##RNA
ggplot(HEData, aes(SGR, RNA)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("RNA abundance (unitless)"))) + 
  geom_line(data = HEPreds, aes(SGR, RNA), lwd = 1.5)

#===========
# Proteins
#===========
nlsP<-nls(Protein~(0.25*pX1 + pe*HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4])))/
              (0.25 + HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4]))),
            HEData, start = list(pX1 = 0.8, pe = 0.1))
summary(nlsP)
##Visualize predictions
HEPreds$Protein <- with(HEPreds, (0.25*coef(nlsP)[1] + coef(nlsP)[2]*HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4])))/
                      (0.25 + HEmasspar[2]*((-SGR - HEmasspar[3])/(SGR - HEmasspar[4]))))

##Protein
ggplot(HEData, aes(SGR, Protein)) + geom_point(cex = 6, pch = 21, fill = "grey") +
  theme_min + 
  xlab(expression(paste("Specific growth rate (", h^{-1}, ")"))) +
  ylab(expression(paste("Proteins abundance (unitless)"))) + 
  geom_line(data = HEPreds, aes(SGR, Protein), lwd = 1.5)

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
parsAll <- rbind(parsAll, data.frame(Study = c("Herbert (1961)"),
                                     Treatment = c("Glucose"),
                                     yA = c(NA),  Km = c(NA), 
                                     v = c(HEmasspar[4]*24), m = c(HEmasspar[3]*24),  
                                     g = c(HEmasspar[2]), ce = c(NA),  
                                     nX1 = c(NA),
                                     iX1 = c(coef(nlsDNA)),  tX1 = c(NA), te = c(NA), rX1 = c(coef(nlsRNA)[1]),
                                     re = c(coef(nlsRNA)[2]),  pX1 = c(coef(nlsP)[1]), pe = c(coef(nlsP)[2]),
                                     lX1 = c(NA), le = c(NA)))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Santruckova et al. unpublished data~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
HData = read.csv("../SoilMBVariabilityData/HankaVidenData.csv")
#Mark outliers
HData$outlier<-"NO"
HData[(HData$WallsProtoDirect>30 & !is.na(HData$WallsProtoDirect)), "outlier"]<-"YES"
HData[(HData$WallsProtoDirect>6 & !is.na(HData$WallsProtoDirect)), "outlier"]<-"YES"
HData$outlier2<-"NO"
HData[(HData$WallsProtoIndirect>10 & !is.na(HData$WallsProtoIndirect) & HData$Exp == "CB"), "outlier2"]<-"YES"

#Visualizing the data
##Cumulative respiration
ggplot(HData, aes(Time, Rc)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol ",g(DW)^{-1}, ")"))) + xlab("Time (hours)") + 
  #theme(legend.position = c(0.8, 0.8)) + 
  facet_grid(.~Exp)

##Microbial cells
HData %>% filter(outlier2 == "NO") %>% group_by(Substrate, Time, Exp) %>% 
  summarize(y = mean(Cells, na.rm=T), ySD = sd(Cells, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  facet_wrap(~Exp, scales = "free")


##kec factor calculated as cell walls content divided by protoplasm content
HData %>% filter(outlier == "NO") %>% group_by(Substrate, Time, Exp) %>% 
  summarize(y = mean(WallsProtoDirect, na.rm=T), ySD = sd(WallsProtoDirect, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  facet_grid(.~Exp)

HData %>% filter(outlier2 == "NO") %>% group_by(Substrate, Time, Exp) %>% 
  summarize(y = mean(WallsProtoIndirect, na.rm=T), ySD = sd(WallsProtoIndirect, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  facet_wrap(~Exp, scales = "free")

#Testing the volume-specific DEB model
###Defining the model
DEBmodel<-function(time, Y, pars){
  #Pools
  S = Y[1]
  e = Y[2]
  X1 = Y[3]
  CO2 = Y[4]
  #Parameters
  yA = pars[1]
  Km = pars[2]
  v = pars[3]
  m = pars[4]
  g = pars[5]
  ce = pars[6]
  nX1 = pars[7]
  MX1 = ce/4
  #scaling function
  f = S/(Km + S)
  #Fluxes
  uptake = (v*ce/yA)*X1*f
  growth = (v*e - m*g)/(e + g)
  #Microbial biomass
  B = (MX1 + ce*e)*X1
  WallsProto = (nX1*MX1)/(ce*e)
  #Derivatives
  dS = -uptake
  de = v*(f - e)
  dX1 = growth*X1
  dCO2 = uptake*(1 - yA) + (X1*e*(v - growth))*ce - growth*X1*MX1
  
  return(list(c(dS, de, dX1, dCO2), B = B, WallsProto = WallsProto))
}

###Exporting data for Python
###Vidensky experiment, Substrate is Sucrose
y = as.data.frame(HData %>% filter(Exp == "Viden" & Substrate == "Sucrose" & outlier2 == "NO") %>% 
                    group_by(Time) %>% summarise(Rc = mean(Rc, na.rm = T),
                                                 B = mean(Cells, na.rm = T),
                                                 WP = mean(WallsProtoIndirect, na.rm = T),
                                                 Sinit = mean(Sinit, na.rm = T)))
###Vidensky experiment, Substrate is Sodium acetate
y2 = as.data.frame(HData %>% filter(Exp == "Viden" & Substrate == "Sodium acetate" & outlier2 == "NO") %>% 
                    group_by(Time) %>% summarise(Rc = mean(Rc, na.rm = T),
                                                 B = mean(Cells, na.rm = T),
                                                 WP = mean(WallsProtoIndirect, na.rm = T),
                                                 Sinit = mean(Sinit, na.rm = T)))
###CB experiment, Substrate is Sucrose
y3 = as.data.frame(HData %>% filter(Exp == "CB" & Substrate == "Sucrose" & outlier2 == "NO") %>% 
                     group_by(Time) %>% summarise(Rc = mean(Rc, na.rm = T),
                                                  B = mean(Cells, na.rm = T),
                                                  WP = mean(WallsProtoIndirect, na.rm = T),
                                                  Sinit = mean(Sinit, na.rm = T)))
###CB experiment, Substrate is Sucrose
y4 = as.data.frame(HData %>% filter(Exp == "CB" & Substrate == "Amonnium acetate" & outlier2 == "NO") %>% 
                     group_by(Time) %>% summarise(Rc = mean(Rc, na.rm = T),
                                                  B = mean(Cells, na.rm = T),
                                                  WP = mean(WallsProtoIndirect, na.rm = T),
                                                  Sinit = mean(Sinit, na.rm = T)))
y2$WP[1]<-y$WP[1]
y4$WP[1]<-y3$WP[1]
write.csv(y, "../SoilMBVariabilityData/VidenSucrose.csv")
write.csv(y2, "../SoilMBVariabilityData/VidenSodiumAcetate.csv")
write.csv(y3, "../SoilMBVariabilityData/CBSucrose.csv")
write.csv(y4, "../SoilMBVariabilityData/CBAmonniumAcetate.csv")

###Parameters were estimated in Python
parPython = as.numeric(read.csv("../PythonScripts/VidenSucrosePars.csv", header = F))
DEBPred = read.csv("../PythonScripts/VidenSucrosePred.csv", header = F)
colnames(DEBPred)<-c("RcV", "CellsV", "WPV")
DEBPred$Time = seq(0, 125)
DEBPred$Exp <- "Viden"
DEBPred$Substrate <- "Sucrose"

parPython2 = as.numeric(read.csv("../PythonScripts/VidenSodiumAcetatePars.csv", header = F))
DEBPred2 = read.csv("../PythonScripts/VidenSodiumAcetatePred.csv", header = F)
colnames(DEBPred2)<-c("RcV", "CellsV", "WPV")
DEBPred2$Time = seq(0, 125)
DEBPred2$Exp <- "Viden"
DEBPred2$Substrate <- "Sodium acetate"

parPython3 = as.numeric(read.csv("../PythonScripts/CBSucrose.csv", header = F))
DEBPred3 = read.csv("../PythonScripts/CBSucrosePred.csv", header = F)
colnames(DEBPred3)<-c("RcV", "CellsV", "WPV")
DEBPred3$Time = seq(0, 125)
DEBPred3$Exp <- "CB"
DEBPred3$Substrate <- "Sucrose"

parPython4 = as.numeric(read.csv("../PythonScripts/CBAmonniumAcetate.csv", header = F))
DEBPred4 = read.csv("../PythonScripts/CBAmonniumAcetatePred.csv", header = F)
colnames(DEBPred4)<-c("RcV", "CellsV", "WPV")
DEBPred4$Time = seq(0, 125)
DEBPred4$Exp <- "CB"
DEBPred4$Substrate <- "Amonnium acetate"

DEBPred<-rbind(DEBPred, DEBPred2, DEBPred3, DEBPred4)

###Visualize the results
####Cumulative respiration
HData %>% filter(outlier2 == "NO" & Exp == "Viden") %>% group_by(Time, Substrate, Exp) %>% 
  summarize(y = mean(Rc, na.rm=T), ySD = sd(Rc, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol ",g(DW)^{-1}, ")"))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPred[DEBPred$Exp == "Viden", ], aes(Time, RcV, color = Substrate), lwd = 1.5) #+ 
  facet_wrap(~Exp, scales = "free")
####Biomass
HData %>% filter(outlier2 == "NO" & Exp == "Viden") %>% group_by(Time, Substrate, Exp) %>% 
  summarize(y = mean(Cells, na.rm=T), ySD = sd(Cells, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste("Microbial biomass (", mu, "mol ",g(DW)^{-1}, ")"))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPred[DEBPred$Exp == "Viden", ], aes(Time, CellsV, color = Substrate), lwd = 1.5)# + 
  facet_wrap(~Exp, scales = "free")
####Walls to protoplasma
HData %>% filter(outlier2 == "NO" & Exp == "Viden") %>% group_by(Time, Substrate, Exp) %>% 
  summarize(y = mean(WallsProtoIndirect, na.rm=T), ySD = sd(WallsProtoIndirect, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + xlab("Time (hours)") + 
  ylab(expression(paste(frac("Cell walls", "Protoplasm"))))+
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPred[DEBPred$Exp == "Viden", ], aes(Time, WPV, color = Substrate), lwd = 1.5)# + 
  facet_wrap(~Exp, scales = "free")

#=====================
# Study, Treatment, yA, Km, v, m, g, ce, nX1, 
# iX1, ne, rX1, re, pX1, pe, lX1, le
parsAll <- rbind(parsAll, data.frame(Study = c("Santruckova et al. (unpublished)"),
                                     Treatment = c("Sucrose", "Sodium acetate"),
                                     yA = c(parPython[1], parPython2[1]),  Km = c(parPython[2], parPython2[2]), 
                                     v = c(parPython[3], parPython2[3]), m = c(parPython[4], parPython2[4]),  
                                     g = c(parPython[5], parPython2[5]), ce = c(parPython[6], parPython2[6]),  
                                     nX1 = c(parPython[7], parPython2[7]),
                                     iX1 = c(NA, NA),  tX1 = c(NA, NA), te = c(NA, NA), rX1 = c(NA, NA),
                                     re = c(NA, NA),  pX1 = c(NA, NA), pe = c(NA, NA),
                                     lX1 = c(NA, NA), le = c(NA, NA)))
  
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Study of Chen et al. (2019)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
ChenData = read.csv("../SoilMBVariabilityData/Chen2019.csv")
ChenData$Treatment <- factor(ChenData$Treatment, levels = c("LowP", "HighP"))
#Visualizing the data
##14C data
ggplot(ChenData, aes(Time, C14)) + geom_point(cex = 6, pch = 21, fill = "grey") + theme_min + 
  facet_grid(.~Treatment) + 
  ylab(expression(paste(Flush^{~~~14},C," (", mu, mol~g^{-1}, ")"))) +
  xlab("Time (days")
##15N data
ggplot(ChenData, aes(Time, N15)) + geom_point(cex = 6, pch = 21, fill = "grey") + theme_min + 
  facet_grid(.~Treatment) +
  ylab(expression(paste(Flush^{~~~15},N," (", mu, mol~g^{-1}, ")"))) +
  xlab("Time (days")
##33P data
ggplot(ChenData, aes(Time, P33)) + geom_point(cex = 6, pch = 21, fill = "grey") + theme_min + 
  facet_grid(.~Treatment) +
  ylab(expression(paste(Flush^{~~~33},P," (", mu, mol~g^{-1}, ")"))) +
  xlab("Time (days")

#===============================DEB model simulations
ChenPredLowP = read.csv("../PythonScripts/ChenLowPPred.csv", header = F)
colnames(ChenPredLowP) <- c("C14", "N15", "P33") 
ChenPredLowP$Time = seq(0, 13, by = 0.5)
ChenPredLowP$Treatment = c("LowP")

ChenPredHighP = read.csv("../PythonScripts/ChenHighPPred.csv", header = F)
colnames(ChenPredHighP) <- c("C14", "N15", "P33") 
ChenPredHighP$Time = seq(0, 13, by = 0.5)
ChenPredHighP$Treatment = c("HighP")

ChenPred <- rbind(ChenPredLowP, ChenPredHighP)
ChenPred$Treatment <- factor(ChenPred$Treatment, levels = c("LowP", "HighP"))
#======================================================================
#Visualizing predictions
##14C data
ggplot(ChenData, aes(Time, C14)) + geom_point(cex = 6, pch = 21, fill = "grey") + theme_min + 
  facet_wrap(~Treatment, scales = "free_y") + xlim(0, 17) + 
  geom_line(data = ChenPred, aes(Time+4, C14), lwd = 1.2) +
  ylab(expression(paste(Flush^{~~~14},C," (", mu, mol~g^{-1}, ")"))) +
  xlab("Time (days)")
##15N data
ggplot(ChenData, aes(Time, N15)) + geom_point(cex = 6, pch = 21, fill = "grey") + theme_min + 
  facet_wrap(~Treatment, scales = "free_y") + xlim(0, 17) +
  geom_line(data = ChenPred, aes(Time+4, N15), lwd = 1.2) + 
  ylab(expression(paste(Flush^{~~~15},N," (", mu, mol~g^{-1}, ")"))) +
  xlab("Time (days)")
##33P data
ggplot(ChenData, aes(Time, P33)) + geom_point(cex = 6, pch = 21, fill = "grey") + theme_min + 
  facet_wrap(~Treatment, scales = "free_y") + xlim(0, 17) +
  geom_line(data = ChenPred, aes(Time+4, P33), lwd = 1.2) + 
  ylab(expression(paste(Flush^{~~~33},P," (", mu, mol~g^{-1}, ")"))) +
  xlab("Time (days)")

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Theoretical CUE variability~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
##Simulation is performed for following scenarios:
###X1 = 5 umol(C)/g
###e = 0, 0.5, 1
###S = 25 umol(C)/g
###CUE is measured and labeled C flush or DNA divided by amount of C taken up

#=============================ODE system is defined
DEBmodel<-function(time, Y, p){
  #Pools
  Sl = Y[1] #labeled substrate 
  el = Y[2] #labeled reserves
  eu = Y[3] #unlabeled reserves
  X1l = Y[4] # labeled structure
  X1u = Y[5] #unlabeled structures
  CO2l = Y[6] #labeled CO2
 
  #Parameters
  yA=p[1]
  Km=p[2]     
  v=p[3]
  m=p[4] 
  g=p[5] 
  ce=p[6]
  MX1=ce/4
  nX1 = p[7]
  iX1 = p[8]
  #kec
  kec = (nX1*0.25 + eu + el)/(0.25 + el + eu)
  #kDNA
  kdna = (iX1*0.25)/(0.25 + el + eu)
  
  #Scaling function for substrate uptake
  f=Sl/(Km+Sl) #labeled substrate only
  
  #Isotope signals
  eatm = el/(eu + el)
  X1atm = X1l/(X1l + X1u)
  
  #Labeled biomass
  Bl = X1l*0.25*ce + (X1l + X1u)*ce*el
  #Unlabeled biomass
  Bu = X1u*0.25*ce + (X1l + X1u)*ce*eu
  
  #Labeled chloroform flush
  Flushl = kec*Bl
  #Labeled DNA
  DNAl = kdna*Bl
  
  #Fluxes
  uptake=(v*ce/yA)*(X1l+X1u)*f #labeled substrate only
  growth = (v*(el+eu)-m*g)/(el + eu + g)
  
  #Derivatives
  dSl = -uptake
  del = v*(f - el)
  deu = -v*eu
  dX1l = max(0, (X1l + X1u)*growth*eatm) + min(0, (X1l + X1u)*growth*X1atm)
  dX1u = max(0, (X1l + X1u)*growth*(1 - eatm)) + min(0, (X1l + X1u)*growth*(1 - X1atm))
  dCO2l = (ce*(X1l + X1u)*(el + eu)*(v - growth)*eatm) - max(0, (X1l + X1u)*growth*eatm)*MX1 - min(0, (X1l + X1u)*growth*X1atm)*MX1
    
  return(list(c(dSl, del, deu, dX1l, dX1u, dCO2l), 
              kec = as.numeric(kec), kdna = as.numeric(kdna), Bl = as.numeric(Bl), Bu = as.numeric(Bu), 
              Flushl = as.numeric(Flushl), DNAl = as.numeric(DNAl)))
}

#=============================
#Model parameters (pmodel)
debpars = c(p[1], p[2], v = mean(parsAll$v[c(1:5, 7:11, 13, 14, 17:20)]),
            p[4], p[5], p[7], nX1 = mean(parsAll$nX1, na.rm = T), iX1 = mean(parsAll$iX1, na.rm = T))
#Time
t = seq(0, 7, by = 0.1)

#====For e = 1
simOut_e1 = as.data.frame(ode(y = c(Sl = 5, el = 0, eu = 1, X1l = 0, X1u = (25*4/debpars[["ce"]]), CO2l = 0),
                              parms = debpars, times = t, func = DEBmodel))
simOut_e1$e = 1
#====For e = 0.5
simOut_e05 = as.data.frame(ode(y = c(Sl = 5, el = 0, eu = 0.5, X1l = 0, X1u = (25*4/debpars[["ce"]]), CO2l = 0),
                              parms = debpars, times = t, func = DEBmodel))
simOut_e05$e = 0.5
#====For e = 0
DEBmodel0<-function(time, Y, p){
  #Pools
  Sl = Y[1] #labeled substrate 
  el = Y[2] #labeled reserves
  X1l = Y[3] # labeled structure
  X1u = Y[4] #unlabeled structures
  CO2l = Y[5] #labeled CO2
  
  #Parameters
  yA=p[1]
  Km=p[2]     
  v=p[3]
  m=p[4] 
  g=p[5] 
  ce=p[6]
  MX1=ce/4
  nX1 = p[7]
  iX1 = p[8]
  #kec
  kec = (nX1*0.25 + el)/(0.25 + el)
  #kDNA
  kdna = (iX1*0.25)/(0.25 + el)
  
  #Scaling function for substrate uptake
  f=Sl/(Km+Sl) #labeled substrate only
  
  #Isotope signals
  eatm = 1
  X1atm = X1l/(X1l + X1u)
  
  #Labeled biomass
  Bl = X1l*0.25*ce + (X1l + X1u)*ce*el
  #Labeled biomass
  Bu = X1u*0.25*ce
 
  #Labeled chloroform flush
  Flushl = kec*Bl
  #Labeled DNA
  DNAl = kdna*Bl
  
  #Fluxes
  uptake=(v*ce/yA)*(X1l+X1u)*f #labeled substrate only
  growth = (v*el-m*g)/(el + g)
  
  #Derivatives
  dSl = -uptake
  del = v*(f - el)
  dX1l = max(0, (X1l + X1u)*growth) + min(0, (X1l + X1u)*growth*X1atm)
  dX1u = min(0, (X1l + X1u)*growth*(1 - X1atm))
  dCO2l = (ce*(X1l + X1u)*el*(v - growth)) - max(0, (X1l + X1u)*growth)*MX1 - min(0, (X1l + X1u)*growth*X1atm)*MX1
  
  return(list(c(dSl, del, dX1l, dX1u, dCO2l), 
              kec = as.numeric(kec), kdna = as.numeric(kdna), Bl = as.numeric(Bl), Bu = as.numeric(Bu),
              Flushl = as.numeric(Flushl), DNAl = as.numeric(DNAl)))
}


simOut_e0 = as.data.frame(ode(y = c(Sl = 5, el = 0, X1l = 0, X1u = (25*4/debpars[["ce"]]), CO2l = 0),
                               parms = debpars, times = t, func = DEBmodel0))
simOut_e0$e = 0
simOut_e0$eu = NA

simOut <- rbind(simOut_e0, simOut_e05, simOut_e1)

#=============================Visualization
##calculate CUE for chloroform Flush and DNA
simOut$CUEFlush <- with(simOut, (Flushl/0.41)/((Flushl/0.41) + CO2l))
###Total DNA and MBC
simOut$DNA <- with(simOut, (Bl + Bu)*kDNA)
simOut$MBC <- with(simOut, (Bl + Bu)*kec/0.41)
simOut$CUEDNA <- with(simOut, (DNAl*10.9)/((DNAl*10.9) + CO2l))
simOut$CUE <- with(simOut, Bl/(Bl + CO2l))

simOut2 <- simOut[simOut$time<3, c("time", "CUEFlush", "CUEDNA", "e")]
simOut2$e <- as.factor(simOut2$e)
SimOut2 <- melt(simOut2, id.vars = c("time", "e"))
levels(SimOut2$e) <- c("italic(e==0)", "italic(e==0.5)", "italic(e==1)")

ggplot(SimOut2, aes(time, value)) + geom_line(aes(color = variable), lwd = 1) + theme_min + 
  geom_hline(yintercept = 1/(1 + debpars[5])) + facet_grid(.~e, labeller = label_parsed) + xlab("Time (days)") +
  scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.25, 0.5, 0.75, 1)) +
  ylab("Carbon use efficiency") + 
  scale_color_manual(values = c("black", "grey60"), 
                     labels = c(expression(paste(italic(CUE[CFE]))), expression(paste(italic(CUE[DNA]))))) +
  theme(legend.title = element_blank(), legend.position = c(0.9, 0.8))

simOut3 <- simOut[simOut$time<3, c("time", "kec", "kdna", "e")]
simOut3$e <- as.factor(simOut3$e)
SimOut3 <- melt(simOut3, id.vars = c("time", "e"))
levels(SimOut3$e) <- c("italic(e==0)", "italic(e==0.5)", "italic(e==1)")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Death ENDs~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Differentiating surface- and volume-specific fluxes
##When fluxes are divided into surface and volume-specific, then the change of e over time is
##given by the differential equation
##de/dt = v*X1^(-1/3)*e
##change of X1 over time is defined as:
##dX1/dt = mu*X1 where mu = (v*X1^(-1/3)*e - m*g)/(e + g)
##So three new parameters are defined m - specific maintenance rate, g - scaled growth energy demand, and X1 at time 0

##ODE system is defined
DEBmodel<-function(time, Y, p){
  #Pools
  e = Y[1]
  X1 = Y[2]
  #Parameters
  nX1 = p[1]
  v = p[2]
  m = p[3]
  g = p[4]
  k = p[5]
  #kec
  kec = (nX1/4 + e)/(0.25 + e)
  #Derivatives
  de = - v*e*X1^{-1/3} + k*e
  dX1 = X1*((v*e*X1^{-1/3} - m*g)/(e + g)) - k*X1
  return(list(c(de, dX1), kec = kec))
}
##Fitting the model to Alanine data
###Parameter matrix - (initial guess, lower and upper bounds)
PDEB = matrix(data = c(
  10, 0.001, 500, #X1(0)
  DEBcoefs1[2], 0, 1, #e0
  DEBcoefs1[1], 0, 1, #NX1
  DEBcoefs1[4], 0.01, 10, #v
  0.01, 1e-12, 0.1, #m
  0.3, 0.1, 3, #g
  0.01, 1e-12, 0.1 #k
), ncol = 3, nrow = 7, byrow = T)

###Cost function
costALA<-function(x){
  s = ode(y=c(e=x[2], X1=x[1]), func = DEBmodel, parms=x[3:7],
      times = as.numeric(GlData[GlData$Substrate=="Alanin", "Time"])/24, method = "daspk")[,4]
  #Root mean square error
  return(sum(((s - as.numeric(GlData[GlData$Substrate=="Alanin", "kec_original"]))/(as.numeric(GlData[GlData$Substrate=="Alanin", "Time"])/24))^2, na.rm = T))
}

###Parameters estimation using MCMC
ALAmcmc<-modMCMC(f=costALA, p=PDEB[, 1], lower=PDEB[, 2], upper=PDEB[, 3], niter=10000)
summary(ALAmcmc)
###Improving the estimation using differential evolution algorithm
ALA_parDE<-DEoptim(fn=costALA, lower=as.numeric(summary(ALAmcmc)["min",]), upper=as.numeric(summary(ALAmcmc)["max",]), 
                 control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
ALA_parDE$optim$bestmem
###or artificial bee colony algorithm
ALA_parABC<-abc_optim(fn=costALA, par=as.numeric(summary(ALAmcmc)["mean",]), 
                      lb=as.numeric(summary(ALAmcmc)["min",]), 
                      ub=as.numeric(summary(ALAmcmc)["max",]), maxCycle = 1e6)
ALA_parABC$par

###Visualizing the data
ALAsim<-data.frame(Time = seq(0, 50, by = 0.5))
ALAsim$SimDE<-ode(y=c(e=ALA_parDE$optim$bestmem[2], X1=ALA_parDE$optim$bestmem[1]), func = DEBmodel, 
                  parms=ALA_parDE$optim$bestmem[3:7],
                  times = seq(0, 50, by = 0.5), method = "daspk")[,4]
ALAsim$SimABC<-ode(y=c(e=ALA_parABC$par[2], X1=ALA_parABC$par[1]), func = DEBmodel, 
                  parms=ALA_parABC$par[3:7],
                  times = seq(0, 50, by = 0.5), method = "daspk")[,4]
ALAsim$SimMCMCa<-ode(y=c(e=ALAmcmc$bestpar[2], X1=ALAmcmc$bestpar[1]), func = DEBmodel, 
                   parms=ALAmcmc$bestpar[3:7],
                   times = seq(0, 50, by = 0.5), method = "daspk")[,4]
ALAsim$SimMCMCb<-ode(y=c(e=as.numeric(summary(ALAmcmc)["mean",])[2], X1=as.numeric(summary(ALAmcmc)["mean",])[1]), func = DEBmodel, 
                     parms=as.numeric(summary(ALAmcmc)["mean",])[3:7],
                     times = seq(0, 50, by = 0.5), method = "daspk")[,4]


ggplot(subset(GlData, Substrate == "Alanin"), aes(Time/24, kec_original)) + 
  geom_point(cex=6, pch=21) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  geom_line(data = ALAsim, aes(Time, SimDE), lwd=1.5)+
  geom_line(data = ALAsim, aes(Time, SimABC), lwd=1.5) #+
  geom_line(data = ALAsim, aes(Time, SimMCMCa), lwd=1.5)

#Assumption 6: Substrates are taken up by two different types of carriers - high and low efficiency carrier 
#associated with v1 and v2, respectively
##ODE system is defined
DEBmodel<-function(time, Y, p){
  #Pools
  e = Y
  #Parameters
  nX1 = p[1]
  v1 = p[2]
  v2 = p[3]
  #kec
  kec = (nX1/4 + e)/(0.25 + e)
  #Derivatives
  de = - v1*e - v2*e
  return(list(c(de), kec = kec))
}
##Fitting the model to Alanine data
###Parameter space - (initial guess, lower and upper bounds)
PDEB = matrix(data = c(
  DEBcoefs1[2], 0, 1, #e0
  DEBcoefs1[1], 0, 1, #NX1
  DEBcoefs1[4], 0.01, 10, #v1
  DEBcoefs1[4], 0.01, 10 #v2
), ncol = 3, nrow = 4, byrow = T)

###Cost function
costALA<-function(x){
  s = ode(y=c(e=x[1]), func = DEBmodel, parms=x[2:4],
          times = as.numeric(GlData[GlData$Substrate=="Alanin", "Time"])/24)[,3]
  #Root mean square error
  return(sum(((s - as.numeric(GlData[GlData$Substrate=="Alanin", "kec_original"])))^2, na.rm = T))
}

###Parameters estimation using MCMC
ALAmcmc<-modMCMC(f=costALA, p=PDEB[, 1], lower=PDEB[, 2], upper=PDEB[, 3], niter=10000)
summary(ALAmcmc)
###Improving the estimation using differential evolution algorithm
ALA_parDE<-DEoptim(fn=costALA, lower=as.numeric(summary(ALAmcmc)["min",]), upper=as.numeric(summary(ALAmcmc)["max",]), 
                   control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
ALA_parDE$optim$bestmem
###or artificial bee colony algorithm
ALA_parABC<-abc_optim(fn=costALA, par=as.numeric(summary(ALAmcmc)["mean",]), 
                      lb=as.numeric(summary(ALAmcmc)["min",]), 
                      ub=as.numeric(summary(ALAmcmc)["max",]), maxCycle = 1e6)
ALA_parABC$par

###Visualizing the data
ALAsim<-data.frame(Time = seq(0, 50, by = 0.5))
ALAsim$SimDE<-ode(y=c(e=ALA_parDE$optim$bestmem[1]), func = DEBmodel, 
                  parms=ALA_parDE$optim$bestmem[2:4],
                  times = seq(0, 50, by = 0.5))[,3]
ALAsim$SimABC<-ode(y=c(e=ALA_parABC$par[1]), func = DEBmodel, 
                   parms=ALA_parABC$par[2:4],
                   times = seq(0, 50, by = 0.5))[,3]
ALAsim$SimMCMCa<-ode(y=c(e=ALAmcmc$bestpar[1]), func = DEBmodel, 
                     parms=ALAmcmc$bestpar[2:4],
                     times = seq(0, 50, by = 0.5))[,3]
ALAsim$SimMCMCb<-ode(y=c(e=as.numeric(summary(ALAmcmc)["mean",])[1]), func = DEBmodel, 
                     parms=as.numeric(summary(ALAmcmc)["mean",])[2:4],
                     times = seq(0, 50, by = 0.5))[,3]


ggplot(subset(GlData, Substrate == "Alanin"), aes(Time/24, kec_original)) + 
  geom_point(cex=6, pch=21) +
  theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") + 
  geom_line(data = ALAsim, aes(Time, SimDE), lwd=1.5)+
  geom_line(data = ALAsim, aes(Time, SimABC), lwd=1.5) 

#Testing the surface- and volume-specific DEB model
###Defining the model
DEBmodelSV<-function(time, Y, pars){
  #Pools
  S = Y[1]
  e = Y[2]
  X1 = Y[3]
  CO2 = Y[4]
  #Parameters
  yA = pars[1]
  Km = pars[2]
  v = pars[3]
  m = pars[4]
  g = pars[5]
  ce = pars[6]
  nX1 = pars[7]
  MX1 = ce/4
  #scaling function
  f = S/(Km + S)
  #Fluxes
  uptake = (v*ce/yA)*(X1^(2/3))*f
  growth = (v*e*(X1^(-1/3)) - m*g)/(e + g)
  #Microbial biomass
  B = (MX1 + ce*e)*X1
  WallsProto = (nX1*MX1)/(ce*e)
  #Derivatives
  dS = -uptake
  de = v*(X1^(-1/3))*(f - e)
  dX1 = growth*X1
  dCO2 = uptake*(1 - yA) + ce*(X1*e*(v*X1^(-1/3)-growth)) - growth*X1*MX1
  
  return(list(c(dS, de, dX1, dCO2), B = B, WallsProto = WallsProto))
}

###Parameters were estimated in Python
parPythonSV = as.numeric(read.csv("../PythonScripts/VidenSucroseParsSV.csv", header = F))
###Visualize the results
DEBPred$RcSV <- ode(y = c(S = y$Sinit[1], 
                          e = parPythonSV[7]/4/y$WP[1], 
                          X1 = y$B[1]/(parPythonSV[6]*(0.25 + parPythonSV[7]/4/y$WP[1])), 0), 
                    func = DEBmodelSV, parms = parPythonSV, method = "daspk",
                    times = DEBPred$Time)[, 5]
DEBPred$CellsSV <- ode(y = c(S = y$Sinit[1], 
                             e = parPythonSV[7]/4/y$WP[1], 
                             X1 = y$B[1]/(parPythonSV[6]*(0.25 + parPythonSV[7]/4/y$WP[1])), 0), 
                       func = DEBmodelSV, parms = parPythonSV, method = "daspk",
                       times = DEBPred$Time)[, 6]
DEBPred$WPSV <- ode(y = c(S = y$Sinit[1], 
                          e = parPythonSV[7]/4/y$WP[1], 
                          X1 = y$B[1]/(parPythonSV[6]*(0.25 + parPythonSV[7]/4/y$WP[1])), 0), 
                    func = DEBmodelSV, parms = parPythonSV, method = "daspk",
                    times = DEBPred$Time)[, 7]

####Cumulative respiration
HData %>% filter(outlier2 == "NO" & Substrate == "Sucrose" & Exp == "Viden") %>% group_by(Time) %>% 
  summarize(y = mean(Rc, na.rm=T), ySD = sd(Rc, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol ",g(DW)^{-1}, ")"))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPred, aes(Time, RcV), lwd = 1.5) +
  geom_line(data = DEBPred, aes(Time, RcSV), lwd = 1.5, color = "red")
####Biomass
HData %>% filter(outlier2 == "NO" & Substrate == "Sucrose" & Exp == "Viden") %>% group_by(Time) %>% 
  summarize(y = mean(Cells, na.rm=T), ySD = sd(Cells, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + ylab(expression(paste("Microbial biomass (", mu, "mol ",g(DW)^{-1}, ")"))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPred, aes(Time, CellsV), lwd = 1.5) +
  geom_line(data = DEBPred, aes(Time, CellsSV), lwd = 1.5, color = "red")
####Walls to protoplasma
HData %>% filter(outlier2 == "NO" & Substrate == "Sucrose" & Exp == "Viden") %>% group_by(Time) %>% 
  summarize(y = mean(WallsProtoIndirect, na.rm=T), ySD = sd(WallsProtoIndirect, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, fill = "grey") +
  theme_min + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPred, aes(Time, WPV), lwd = 1.5) +
  geom_line(data = DEBPred, aes(Time, WPSV), lwd = 1.5, color = "red")

#Estimating parameters across substrates 
##According the individual set of parameters estimated above, only parameters allowed to
##vary across substrates are yA and v. The rest is fixed
###Parameters were estimated in Python
DEBPredViden = read.csv("../PythonScripts/VidenPred.csv", header = F)
colnames(DEBPredViden)<-c("RcV", "CellsV", "WPV")
DEBPredViden$Time = rep(seq(0, 125), 2)
DEBPredViden$Exp <- "Viden"
DEBPredViden$Substrate <- rep(c("Sucrose", "Sodium acetate"), each = 126)

DEBPredCB = read.csv("../PythonScripts/CBPred.csv", header = F)
colnames(DEBPredCB)<-c("RcV", "CellsV", "WPV")
DEBPredCB$Time = rep(seq(0, 125), 2)
DEBPredCB$Exp <- "CB"
DEBPredCB$Substrate <- rep(c("Sucrose", "Amonnium acetate"), each = 126)

DEBPredSubstrates <- rbind(DEBPredViden, DEBPredCB)

###Visualize the results
####Cumulative respiration
HData %>% filter(outlier2 == "NO") %>% group_by(Time, Substrate, Exp) %>% 
  summarize(y = mean(Rc, na.rm=T), ySD = sd(Rc, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste("Cumulative respiration (", mu, "mol ",g(DW)^{-1}, ")"))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPredSubstrates, aes(Time, RcV, color = Substrate), lwd = 1.5) + 
  facet_wrap(~Exp, scales = "free")
####Biomass
HData %>% filter(outlier2 == "NO") %>% group_by(Time, Substrate, Exp) %>% 
  summarize(y = mean(Cells, na.rm=T), ySD = sd(Cells, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + ylab(expression(paste("Microbial biomass (", mu, "mol ",g(DW)^{-1}, ")"))) + xlab("Time (hours)") + 
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPredSubstrates, aes(Time, CellsV, color = Substrate), lwd = 1.5) + 
  facet_wrap(~Exp, scales = "free")
####Walls to protoplasma
HData %>% filter(outlier2 == "NO") %>% group_by(Time, Substrate, Exp) %>% 
  summarize(y = mean(WallsProtoIndirect, na.rm=T), ySD = sd(WallsProtoIndirect, na.rm=T)) %>% 
  ggplot(aes(Time, y)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
  theme_min + xlab("Time (hours)") + 
  ylab(expression(paste(frac("Cell walls", "Protoplasm"))))+
  geom_errorbar(aes(ymin = y - ySD, ymax = y + ySD), width = 0.1) + 
  geom_line(data = DEBPredSubstrates, aes(Time, WPV, color = Substrate), lwd = 1.5) + 
  facet_wrap(~Exp, scales = "free")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
