#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Enzyme kinetics~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Incubation experiment - GACR Junior project~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#=====================Script that calculate product concentration is uploaded=============================#
source("ECalculatorJunior.R")
#==============================================Libraries==================================================#
library(openxlsx)
library(ggplot2)
library(reshape2)
library(dplyr)
library(bbmle)
library(FME)
library(ABCoptim)
#================================================Theme====================================================#
theme_min<-theme(axis.text.x=element_text(vjust=0.2, size=18, colour="black"),
                 axis.text.y=element_text(hjust=0.2, size=18, colour="black"),
                 axis.title=element_text(size=18, colour="black"),
                 axis.line=element_line(size=0.5, colour="black"),
                 strip.text=element_text(size=18, face="bold"),
                 axis.ticks=element_line(size=1, colour="black"),
                 #axis.ticks.length=unit(-0.05, "cm"),
                 panel.background=element_rect(colour="black", fill="white"),
                 panel.grid=element_line(linetype=0),
                 legend.text=element_text(size=14, colour="black"),
                 legend.title=element_text(size=14, colour="black"),
                 legend.position=c("right"),
                 legend.key.size=unit(1, "cm"),
                 strip.background=element_rect(fill="grey98", colour="black"),
                 legend.key=element_rect(fill="white", size=1.2),
                 legend.spacing=unit(0.5, "cm"),
                 plot.title=element_text(size=18, face="bold", hjust=-0.05))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#==========================================AEROBIC INCUBATION=============================================# 

#==============M1 - sample IDs 2, 4, 9, 10 , 11, 12, 25, 32, 33, 34, 35, 37, 38, 39, 40, 41
Samples=rbind(c(2,4,9,10), c(11,12,25,32), c(33, 34,35,37), c(38:41))
DW=cbind(c(0.28, 0.29,0.3,0.28), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
M1<-ECalculatorJunior(dataset = "MUF M1.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 37, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M1d<-M1$data
#=====Quick vizualization
ggplot(subset(M1d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M1d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M1d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M1d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M1d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M1d$P0<-NA
M1d$S0<-NA
for(i in unique(M1d$Sample)){
  for(n in unique(M1d$ConcEnzyme2)){
    M1d[(M1d$Sample == i & M1d$ConcEnzyme2 == n), "P0"] <- 
      M1d[(M1d$Sample == i & M1d$ConcEnzyme2 == n & M1d$Time == 0), "Pcorr2"]
    M1d[(M1d$Sample == i & M1d$ConcEnzyme2 == n), "S0"] <- 
      M1d[(M1d$Sample == i & M1d$ConcEnzyme2 == n & M1d$Time == 0), "ConcEnzyme2"] - M1d[(M1d$Sample == i & M1d$ConcEnzyme2 == n & M1d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
##===Kinetic equations
#Defining the non-linear functions whose fit will be compared
##Without product inhibition (wi)
wi<-"Time ~ -1/Vmax*(Km*log((S0-Pcorr2)/(S0))-Pcorr2)"
wiSearch <- function(data){
  cost <- function(x){
  #x[1] = Vmax; x[2] = Km
    return(sum((data$Time - -1/x[1]*(x[2]*log((data$S0-data$Pcorr2)/(data$S0))-data$Pcorr2))^2, na.rm=T))
  }
  #Use MCMC to define ranges of possible model parameters
  par_mcmc<-modMCMC(f=cost, p=c(0.5, 10), lower=c(1e-3, 1e-2), upper=c(100, 1000), niter=10000)
  #lower and upper limits for parameters are extracted
  pl<-as.numeric(summary(par_mcmc)["min",])
  pu<-as.numeric(summary(par_mcmc)["max",])
  
  #these limits are used to find global optimum by ABCotpim
  opt_par<-abc_optim(fn=cost, par = as.numeric(summary(par_mcmc)["mean",]), lb=pl, ub=pu, maxCycle = 1e6)
  #return residual sum of squares
  return(list(SSres = cost(opt_par$par), p = opt_par$par))
}
##Substrate inhibition (si)
si<-"Time ~ -1/Vmax*(Km*log((S0-Pcorr2)/S0)-Pcorr2-((S0-Pcorr2)^2-S0^2)/2/Ki)"
siSearch <- function(data){
  cost <- function(x){
    #x[1] = Vmax; x[2] = Km, x[3] = Ki
    return(sum((data$Time - -1/x[1]*(x[2]*log((data$S0-data$Pcorr2)/data$S0)-data$Pcorr2-((data$S0-data$Pcorr2)^2-data$S0^2)/2/x[3]))^2, na.rm=T))
  }
  #Use MCMC to define ranges of possible model parameters
  par_mcmc<-modMCMC(f=cost, p=c(0.5, 10, 100), lower=c(1e-3, 1e-2, 1e-2), upper=c(100, 1000, 1000), niter=10000)
  #lower and upper limits for parameters are extracted
  pl<-as.numeric(summary(par_mcmc)["min",])
  pu<-as.numeric(summary(par_mcmc)["max",])
  
  #these limits are used to find global optimum by ABCotpim
  opt_par<-abc_optim(fn=cost, par = as.numeric(summary(par_mcmc)["mean",]), lb=pl, ub=pu, maxCycle = 1e6)
  #return residual sum of squares
  return(list(SSres = cost(opt_par$par), p = opt_par$par))
}
##Competitive inhibition (ci)
ci<-"Time ~ -1/Vmax*(Km*((S0+P0)/Kic+1)*log((S0-Pcorr2)/(S0))+
                      (1-Km/Kic)*-Pcorr2)"
ciSearch <- function(data){
  cost <- function(x){
    #x[1] = Vmax; x[2] = Km, x[3] = Kic
    return(sum((data$Time - -1/x[1]*(x[2]*((data$S0+data$P0)/x[3]+1)*log((data$S0-data$Pcorr2)/(data$S0))+(1-x[2]/x[3])*-data$Pcorr2))^2, na.rm=T))
  }
  #Use MCMC to define ranges of possible model parameters
  par_mcmc<-modMCMC(f=cost, p=c(0.5, 10, 100), lower=c(1e-3, 1e-2, 1e-2), upper=c(100, 1000, 1000), niter=10000)
  #lower and upper limits for parameters are extracted
  pl<-as.numeric(summary(par_mcmc)["min",])
  pu<-as.numeric(summary(par_mcmc)["max",])
  
  #these limits are used to find global optimum by ABCotpim
  opt_par<-abc_optim(fn=cost, par = as.numeric(summary(par_mcmc)["mean",]), lb=pl, ub=pu, maxCycle = 1e6)
  #return residual sum of squares
  return(list(SSres = cost(opt_par$par), p = opt_par$par))
}
##Non competitive inhibition (nci)
nci<-"Time ~ -1/Vmax*(Km*((S0+P0)/Kiu+1)*log((S0-Pcorr2)/(S0))+
                      (1-(Km+S0+P0)/Kiu)*-Pcorr2-((S0-Pcorr2)^2-(S0)^2)/2/Kiu)"
nciSearch <- function(data){
  cost <- function(x){
    #x[1] = Vmax; x[2] = Km, x[3] = Kiu
    return(sum((data$Time - -1/x[1]*(x[2]*((data$S0+data$P0)/x[3]+1)*log((data$S0-data$Pcorr2)/(data$S0))+(1-(x[2]+data$S0+data$P0)/x[3])*-data$Pcorr2-((data$S0-data$Pcorr2)^2-(data$S0)^2)/2/x[3]))^2, na.rm=T))
  }
  #Use MCMC to define ranges of possible model parameters
  par_mcmc<-modMCMC(f=cost, p=c(0.5, 10, 100), lower=c(1e-3, 1e-2, 1e-2), upper=c(100, 1000, 1000), niter=10000)
  #lower and upper limits for parameters are extracted
  pl<-as.numeric(summary(par_mcmc)["min",])
  pu<-as.numeric(summary(par_mcmc)["max",])
  
  #these limits are used to find global optimum by ABCotpim
  opt_par<-abc_optim(fn=cost, par = as.numeric(summary(par_mcmc)["mean",]), lb=pl, ub=pu, maxCycle = 1e6)
  #return residual sum of squares
  return(list(SSres = cost(opt_par$par), p = opt_par$par))
}
##Uncompetitive inhibition (uci)
uci<-"Time ~ -1/Vmax*(Km*log((S0-Pcorr2)/(S0))+
                      (1+(Km+S0+P0)/Kiu)*-Pcorr2-((S0-Pcorr2)^2-(S0)^2)/2/Kiu)"
uciSearch <- function(data){
  cost <- function(x){
    #x[1] = Vmax; x[2] = Km, x[3] = Kiu
    return(sum((data$Time - -1/x[1]*(x[2]*log((data$S0-data$Pcorr2)/(data$S0))+(1+(x[2]+data$S0+data$P0)/x[3])*-data$Pcorr2-((data$S0-data$Pcorr2)^2-(data$S0)^2)/2/x[3]))^2, na.rm=T))
  }
  #Use MCMC to define ranges of possible model parameters
  par_mcmc<-modMCMC(f=cost, p=c(0.5, 10, 100), lower=c(1e-3, 1e-2, 1e-2), upper=c(100, 1000, 1000), niter=10000)
  #lower and upper limits for parameters are extracted
  pl<-as.numeric(summary(par_mcmc)["min",])
  pu<-as.numeric(summary(par_mcmc)["max",])
  
  #these limits are used to find global optimum by ABCotpim
  opt_par<-abc_optim(fn=cost, par = as.numeric(summary(par_mcmc)["mean",]), lb=pl, ub=pu, maxCycle = 1e6)
  #return residual sum of squares
  return(list(SSres = cost(opt_par$par), p = opt_par$par))
}

#===============Find the best kinetic law 
M1kinetics<-data.frame(Sample = rep(unique(M1d$Sample), each = 5), Enzyme = rep(unique(M1d$Enzyme), times = length(unique(M1d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M1d$Sample)){
  for(n in unique(M1d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M1kinetics[(M1kinetics$Sample == i & M1kinetics$Enzyme == n), "wi"]<-wiSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[1]]
        M1kinetics[(M1kinetics$Sample == i & M1kinetics$Enzyme == n), "si"]<-siSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[1]]
        M1kinetics[(M1kinetics$Sample == i & M1kinetics$Enzyme == n), "ci"]<-ciSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[1]]
        M1kinetics[(M1kinetics$Sample == i & M1kinetics$Enzyme == n), "nci"]<-nciSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[1]]
        M1kinetics[(M1kinetics$Sample == i & M1kinetics$Enzyme == n), "uci"]<-uciSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[1]]
        M1kinetics[(M1kinetics$Sample == i & M1kinetics$Enzyme == n), "nt"]<-nrow(M1d[(M1d$Sample == i & M1d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M1kinetics)){
  #Probability of better goodness of fit as compared to wi
  M1kinetics$si.p[i] = round(pf(q=(M1kinetics$wi[i] - M1kinetics$si[i])*(M1kinetics$nt[i] - 3)/M1kinetics$si[i]/(3 - 2), 
                          df1=(3 - 2), 
                          df2=(M1kinetics$nt[i] - 3), 
                          lower.tail=F), 3)
  M1kinetics$ci.p[i] = round(pf(q=(M1kinetics$wi[i] - M1kinetics$ci[i])*(M1kinetics$nt[i] - 3)/M1kinetics$ci[i]/(3 - 2), 
                          df1=(3 - 2), 
                          df2=(M1kinetics$nt[i] - 3), 
                          lower.tail=F), 3)
  M1kinetics$nci.p[i] = round(pf(q=(M1kinetics$wi[i] - M1kinetics$nci[i])*(M1kinetics$nt[i] - 3)/M1kinetics$nci[i]/(3 - 2), 
                           df1=(3 - 2), 
                           df2=(M1kinetics$nt[i] - 3), 
                           lower.tail=F), 3)
  M1kinetics$uci.p[i] = round(pf(q=(M1kinetics$wi[i] - M1kinetics$uci[i])*(M1kinetics$nt[i] - 3)/M1kinetics$uci[i]/(3 - 2), 
                           df1=(3 - 2), 
                           df2=(M1kinetics$nt[i] - 3), 
                           lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M1Edata <- data.frame(Sample = rep(unique(M1d$Sample), each = 5), 
                      Enzyme = rep(unique(M1d$Enzyme), times = length(unique(M1d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M1Edata$Inhibition <- NA

for(i in 1:nrow(M1kinetics)){
  if(M1kinetics$ci.p[i]<0.05 | M1kinetics$nci.p[i]<0.05 | M1kinetics$uci.p[i]<0.05){
    M1Edata$Inhibition[i]<-names(which.min(M1kinetics[i, c(3, 5:7)]))
  }else{
    M1Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M1Edata$Sample)){
  for(n in unique(M1Edata$Enzyme)){
    M1Edata[(M1Edata$Sample == i & M1Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M1Edata$Sample)){
  for(n in unique(M1Edata$Enzyme)){
    if(M1Edata[(M1Edata$Sample == i & M1Edata$Enzyme == n), "Inhibition"] == "wi"){
     M1Edata[(M1Edata$Sample == i & M1Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[2]]), NA)
   }else{
     if(M1Edata[(M1Edata$Sample == i & M1Edata$Enzyme == n), "Inhibition"] == "ci"){
       M1Edata[(M1Edata$Sample == i & M1Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[2]])
     }else{
       M1Edata[(M1Edata$Sample == i & M1Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M1d[(M1d$Sample == i & M1d$Enzyme == n), ])[[2]])
     }
   }
  }
}

M1Edata$Conditions<-c("Aerobic")

#==============M2 - sample IDs 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59
Samples=rbind(c(42:45), c(46, 47, 48, 50), c(51:54), c(55, 56, 57, 59))
DW=cbind(rep(0.29, 4), rep(0.29, 4), rep(0.29, 4), rep(0.29, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
M2<-ECalculatorJunior(dataset = "MUF M2.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 37, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M2d<-M2$data
#=====Quick vizualization
ggplot(subset(M2d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M2d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M2d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M2d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M2d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M2d$P0<-NA
M2d$S0<-NA
for(i in unique(M2d$Sample)){
  for(n in unique(M2d$ConcEnzyme2)){
    M2d[(M2d$Sample == i & M2d$ConcEnzyme2 == n), "P0"] <- 
      M2d[(M2d$Sample == i & M2d$ConcEnzyme2 == n & M2d$Time == 0), "Pcorr2"]
    M2d[(M2d$Sample == i & M2d$ConcEnzyme2 == n), "S0"] <- 
      M2d[(M2d$Sample == i & M2d$ConcEnzyme2 == n & M2d$Time == 0), "ConcEnzyme2"] - M2d[(M2d$Sample == i & M2d$ConcEnzyme2 == n & M2d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
M2kinetics<-data.frame(Sample = rep(unique(M2d$Sample), each = 5), Enzyme = rep(unique(M2d$Enzyme), times = length(unique(M2d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M2d$Sample)){
  for(n in unique(M2d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M2kinetics[(M2kinetics$Sample == i & M2kinetics$Enzyme == n), "wi"]<-wiSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[1]]
        M2kinetics[(M2kinetics$Sample == i & M2kinetics$Enzyme == n), "si"]<-siSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[1]]
        M2kinetics[(M2kinetics$Sample == i & M2kinetics$Enzyme == n), "ci"]<-ciSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[1]]
        M2kinetics[(M2kinetics$Sample == i & M2kinetics$Enzyme == n), "nci"]<-nciSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[1]]
        M2kinetics[(M2kinetics$Sample == i & M2kinetics$Enzyme == n), "uci"]<-uciSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[1]]
        M2kinetics[(M2kinetics$Sample == i & M2kinetics$Enzyme == n), "nt"]<-nrow(M2d[(M2d$Sample == i & M2d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M2kinetics)){
  #Probability of better goodness of fit as compared to wi
  M2kinetics$si.p[i] = round(pf(q=(M2kinetics$wi[i] - M2kinetics$si[i])*(M2kinetics$nt[i] - 3)/M2kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M2kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M2kinetics$ci.p[i] = round(pf(q=(M2kinetics$wi[i] - M2kinetics$ci[i])*(M2kinetics$nt[i] - 3)/M2kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M2kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M2kinetics$nci.p[i] = round(pf(q=(M2kinetics$wi[i] - M2kinetics$nci[i])*(M2kinetics$nt[i] - 3)/M2kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M2kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  M2kinetics$uci.p[i] = round(pf(q=(M2kinetics$wi[i] - M2kinetics$uci[i])*(M2kinetics$nt[i] - 3)/M2kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M2kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M2Edata <- data.frame(Sample = rep(unique(M2d$Sample), each = 5), 
                      Enzyme = rep(unique(M2d$Enzyme), times = length(unique(M2d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M2Edata$Inhibition <- NA

for(i in 1:nrow(M2kinetics)){
  if(M2kinetics$ci.p[i]<0.05 | M2kinetics$nci.p[i]<0.05 | M2kinetics$uci.p[i]<0.05){
    M2Edata$Inhibition[i]<-names(which.min(M2kinetics[i, c(3, 5:7)]))
  }else{
    M2Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M2Edata$Sample)){
  for(n in unique(M2Edata$Enzyme)){
    M2Edata[(M2Edata$Sample == i & M2Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M2Edata$Sample)){
  for(n in unique(M2Edata$Enzyme)){
    if(M2Edata[(M2Edata$Sample == i & M2Edata$Enzyme == n), "Inhibition"] == "wi"){
      M2Edata[(M2Edata$Sample == i & M2Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(M2Edata[(M2Edata$Sample == i & M2Edata$Enzyme == n), "Inhibition"] == "ci"){
        M2Edata[(M2Edata$Sample == i & M2Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[2]])
      }else{
        M2Edata[(M2Edata$Sample == i & M2Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M2d[(M2d$Sample == i & M2d$Enzyme == n), ])[[2]])
      }
    }
  }
}

M2Edata$Conditions<-c("Aerobic")

#==============M3 - sample IDs 61, 62, 63, 64, 65, 68, 73, 74, 75, 76, 77, 83, 84, 107, 108, 110
Samples=rbind(c(61, 62, 63, 64), c(65, 68, 73, 74), c(75, 76, 77, 83), c(84, 107, 108, 110))
DW=cbind(rep(0.29, 4), rep(0.28, 4), c(0.29, 0.29, 0.29, 0.3081), c(0.3195, 0.2783, 0.2853, 0.2757))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
M3<-ECalculatorJunior(dataset = "MUF M3.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 37, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M3d<-M3$data
#=====Quick vizualization
ggplot(subset(M3d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M3d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M3d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M3d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M3d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M3d$P0<-NA
M3d$S0<-NA
for(i in unique(M3d$Sample)){
  for(n in unique(M3d$ConcEnzyme2)){
    M3d[(M3d$Sample == i & M3d$ConcEnzyme2 == n), "P0"] <- 
      M3d[(M3d$Sample == i & M3d$ConcEnzyme2 == n & M3d$Time == 0), "Pcorr2"]
    M3d[(M3d$Sample == i & M3d$ConcEnzyme2 == n), "S0"] <- 
      M3d[(M3d$Sample == i & M3d$ConcEnzyme2 == n & M3d$Time == 0), "ConcEnzyme2"] - M3d[(M3d$Sample == i & M3d$ConcEnzyme2 == n & M3d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
M3kinetics<-data.frame(Sample = rep(unique(M3d$Sample), each = 5), Enzyme = rep(unique(M3d$Enzyme), times = length(unique(M3d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M3d$Sample)){
  for(n in unique(M3d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M3kinetics[(M3kinetics$Sample == i & M3kinetics$Enzyme == n), "wi"]<-wiSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[1]]
        M3kinetics[(M3kinetics$Sample == i & M3kinetics$Enzyme == n), "si"]<-siSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[1]]
        M3kinetics[(M3kinetics$Sample == i & M3kinetics$Enzyme == n), "ci"]<-ciSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[1]]
        M3kinetics[(M3kinetics$Sample == i & M3kinetics$Enzyme == n), "nci"]<-nciSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[1]]
        M3kinetics[(M3kinetics$Sample == i & M3kinetics$Enzyme == n), "uci"]<-uciSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[1]]
        M3kinetics[(M3kinetics$Sample == i & M3kinetics$Enzyme == n), "nt"]<-nrow(M3d[(M3d$Sample == i & M3d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M3kinetics)){
  #Probability of better goodness of fit as compared to wi
  M3kinetics$si.p[i] = round(pf(q=(M3kinetics$wi[i] - M3kinetics$si[i])*(M3kinetics$nt[i] - 3)/M3kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M3kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M3kinetics$ci.p[i] = round(pf(q=(M3kinetics$wi[i] - M3kinetics$ci[i])*(M3kinetics$nt[i] - 3)/M3kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M3kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M3kinetics$nci.p[i] = round(pf(q=(M3kinetics$wi[i] - M3kinetics$nci[i])*(M3kinetics$nt[i] - 3)/M3kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M3kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  M3kinetics$uci.p[i] = round(pf(q=(M3kinetics$wi[i] - M3kinetics$uci[i])*(M3kinetics$nt[i] - 3)/M3kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M3kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M3Edata <- data.frame(Sample = rep(unique(M3d$Sample), each = 5), 
                      Enzyme = rep(unique(M3d$Enzyme), times = length(unique(M3d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M3Edata$Inhibition <- NA

for(i in 1:nrow(M3kinetics)){
  if(M3kinetics$ci.p[i]<0.05 | M3kinetics$nci.p[i]<0.05 | M3kinetics$uci.p[i]<0.05){
    M3Edata$Inhibition[i]<-names(which.min(M3kinetics[i, c(3, 5:7)]))
  }else{
    M3Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M3Edata$Sample)){
  for(n in unique(M3Edata$Enzyme)){
    M3Edata[(M3Edata$Sample == i & M3Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M3Edata$Sample)){
  for(n in unique(M3Edata$Enzyme)){
    if(M3Edata[(M3Edata$Sample == i & M3Edata$Enzyme == n), "Inhibition"] == "wi"){
      M3Edata[(M3Edata$Sample == i & M3Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(M3Edata[(M3Edata$Sample == i & M3Edata$Enzyme == n), "Inhibition"] == "ci"){
        M3Edata[(M3Edata$Sample == i & M3Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[2]])
      }else{
        M3Edata[(M3Edata$Sample == i & M3Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M3d[(M3d$Sample == i & M3d$Enzyme == n), ])[[2]])
      }
    }
  }
}

M3Edata$Conditions<-c("Aerobic")

#==============M4 - sample IDs 1, 3, 49, 66, 67, 69, 70, 71, 78, 79, 81, 82, 85, 86, 666, 667
Samples=rbind(c(1, 3, 49, 66), c(67, 69, 70, 71), c(78, 79, 81, 82), c(85, 86, 666, 667))
DW=cbind(c(0.2862, 0.2862, 0.29, 0.28), c(0.29,0.2729, 0.282, 0.2834), 
         c(0.29, 0.2834, 0.3115, 0.3109), c(0.2903, 0.2846, 0.2853, 0.2757))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
M4<-ECalculatorJunior(dataset = "MUF M4.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 37, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M4d<-M4$data
#=====Quick vizualization
ggplot(subset(M4d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M4d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M4d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M4d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M4d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M4d$P0<-NA
M4d$S0<-NA
for(i in unique(M4d$Sample)){
  for(n in unique(M4d$ConcEnzyme2)){
    M4d[(M4d$Sample == i & M4d$ConcEnzyme2 == n), "P0"] <- 
      M4d[(M4d$Sample == i & M4d$ConcEnzyme2 == n & M4d$Time == 0), "Pcorr2"]
    M4d[(M4d$Sample == i & M4d$ConcEnzyme2 == n), "S0"] <- 
      M4d[(M4d$Sample == i & M4d$ConcEnzyme2 == n & M4d$Time == 0), "ConcEnzyme2"] - M4d[(M4d$Sample == i & M4d$ConcEnzyme2 == n & M4d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
M4kinetics<-data.frame(Sample = rep(unique(M4d$Sample), each = 5), Enzyme = rep(unique(M4d$Enzyme), times = length(unique(M4d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M4d$Sample)){
  for(n in unique(M4d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M4kinetics[(M4kinetics$Sample == i & M4kinetics$Enzyme == n), "wi"]<-wiSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[1]]
        M4kinetics[(M4kinetics$Sample == i & M4kinetics$Enzyme == n), "si"]<-siSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[1]]
        M4kinetics[(M4kinetics$Sample == i & M4kinetics$Enzyme == n), "ci"]<-ciSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[1]]
        M4kinetics[(M4kinetics$Sample == i & M4kinetics$Enzyme == n), "nci"]<-nciSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[1]]
        M4kinetics[(M4kinetics$Sample == i & M4kinetics$Enzyme == n), "uci"]<-uciSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[1]]
        M4kinetics[(M4kinetics$Sample == i & M4kinetics$Enzyme == n), "nt"]<-nrow(M4d[(M4d$Sample == i & M4d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M4kinetics)){
  #Probability of better goodness of fit as compared to wi
  M4kinetics$si.p[i] = round(pf(q=(M4kinetics$wi[i] - M4kinetics$si[i])*(M4kinetics$nt[i] - 3)/M4kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M4kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M4kinetics$ci.p[i] = round(pf(q=(M4kinetics$wi[i] - M4kinetics$ci[i])*(M4kinetics$nt[i] - 3)/M4kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M4kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M4kinetics$nci.p[i] = round(pf(q=(M4kinetics$wi[i] - M4kinetics$nci[i])*(M4kinetics$nt[i] - 3)/M4kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M4kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  M4kinetics$uci.p[i] = round(pf(q=(M4kinetics$wi[i] - M4kinetics$uci[i])*(M4kinetics$nt[i] - 3)/M4kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M4kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M4Edata <- data.frame(Sample = rep(unique(M4d$Sample), each = 5), 
                      Enzyme = rep(unique(M4d$Enzyme), times = length(unique(M4d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M4Edata$Inhibition <- NA

for(i in 1:nrow(M4kinetics)){
  if(M4kinetics$ci.p[i]<0.05 | M4kinetics$nci.p[i]<0.05 | M4kinetics$uci.p[i]<0.05){
    M4Edata$Inhibition[i]<-names(which.min(M4kinetics[i, c(3, 5:7)]))
  }else{
    M4Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M4Edata$Sample)){
  for(n in unique(M4Edata$Enzyme)){
    M4Edata[(M4Edata$Sample == i & M4Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M4Edata$Sample)){
  for(n in unique(M4Edata$Enzyme)){
    if(M4Edata[(M4Edata$Sample == i & M4Edata$Enzyme == n), "Inhibition"] == "wi"){
      M4Edata[(M4Edata$Sample == i & M4Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(M4Edata[(M4Edata$Sample == i & M4Edata$Enzyme == n), "Inhibition"] == "ci"){
        M4Edata[(M4Edata$Sample == i & M4Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[2]])
      }else{
        M4Edata[(M4Edata$Sample == i & M4Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M4d[(M4d$Sample == i & M4d$Enzyme == n), ])[[2]])
      }
    }
  }
}

M4Edata <- M4Edata[M4Edata$Sample<600, ]
M4Edata$Conditions<-c("Aerobic")

#==============M5 - sample IDs 87, 89, 90, 91, 92, 93, 100, 101, 105, 106, 109, 666
Samples=rbind(c(87, 89, 90, 91), c(92, 93, 100, 101), c(105, 106, 109, 666))
DW=cbind(c(0.2833, 0.2708, 0.2673, 0.2701), c(0.2688,0.2744, 0.2703, 0.2801), 
         c(0.2778, 0.2781, 0.2758, 0.3109))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
source("ECalculatorJunior3Plates.R")
M5<-ECalculatorJunior3Plates(dataset = "MUF M5.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 28, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M5d<-M5$data
#=====Quick vizualization
ggplot(subset(M5d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M5d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M5d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M5d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M5d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M5d$P0<-NA
M5d$S0<-NA
for(i in unique(M5d$Sample)){
  for(n in unique(M5d$ConcEnzyme2)){
    M5d[(M5d$Sample == i & M5d$ConcEnzyme2 == n), "P0"] <- 
      M5d[(M5d$Sample == i & M5d$ConcEnzyme2 == n & M5d$Time == 0), "Pcorr2"]
    M5d[(M5d$Sample == i & M5d$ConcEnzyme2 == n), "S0"] <- 
      M5d[(M5d$Sample == i & M5d$ConcEnzyme2 == n & M5d$Time == 0), "ConcEnzyme2"] - M5d[(M5d$Sample == i & M5d$ConcEnzyme2 == n & M5d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
M5kinetics<-data.frame(Sample = rep(unique(M5d$Sample), each = 5), Enzyme = rep(unique(M5d$Enzyme), times = length(unique(M5d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M5d$Sample)){
  for(n in unique(M5d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M5kinetics[(M5kinetics$Sample == i & M5kinetics$Enzyme == n), "wi"]<-wiSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[1]]
        M5kinetics[(M5kinetics$Sample == i & M5kinetics$Enzyme == n), "si"]<-siSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[1]]
        M5kinetics[(M5kinetics$Sample == i & M5kinetics$Enzyme == n), "ci"]<-ciSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[1]]
        M5kinetics[(M5kinetics$Sample == i & M5kinetics$Enzyme == n), "nci"]<-nciSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[1]]
        M5kinetics[(M5kinetics$Sample == i & M5kinetics$Enzyme == n), "uci"]<-uciSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[1]]
        M5kinetics[(M5kinetics$Sample == i & M5kinetics$Enzyme == n), "nt"]<-nrow(M5d[(M5d$Sample == i & M5d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M5kinetics)){
  #Probability of better goodness of fit as compared to wi
  M5kinetics$si.p[i] = round(pf(q=(M5kinetics$wi[i] - M5kinetics$si[i])*(M5kinetics$nt[i] - 3)/M5kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M5kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M5kinetics$ci.p[i] = round(pf(q=(M5kinetics$wi[i] - M5kinetics$ci[i])*(M5kinetics$nt[i] - 3)/M5kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M5kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M5kinetics$nci.p[i] = round(pf(q=(M5kinetics$wi[i] - M5kinetics$nci[i])*(M5kinetics$nt[i] - 3)/M5kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M5kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  M5kinetics$uci.p[i] = round(pf(q=(M5kinetics$wi[i] - M5kinetics$uci[i])*(M5kinetics$nt[i] - 3)/M5kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M5kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M5Edata <- data.frame(Sample = rep(unique(M5d$Sample), each = 5), 
                      Enzyme = rep(unique(M5d$Enzyme), times = length(unique(M5d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M5Edata$Inhibition <- NA

for(i in 1:nrow(M5kinetics)){
  if(M5kinetics$ci.p[i]<0.05 | M5kinetics$nci.p[i]<0.05 | M5kinetics$uci.p[i]<0.05){
    M5Edata$Inhibition[i]<-names(which.min(M5kinetics[i, c(3, 5:7)]))
  }else{
    M5Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M5Edata$Sample)){
  for(n in unique(M5Edata$Enzyme)){
    M5Edata[(M5Edata$Sample == i & M5Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M5Edata$Sample)){
  for(n in unique(M5Edata$Enzyme)){
    if(M5Edata[(M5Edata$Sample == i & M5Edata$Enzyme == n), "Inhibition"] == "wi"){
      M5Edata[(M5Edata$Sample == i & M5Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(M5Edata[(M5Edata$Sample == i & M5Edata$Enzyme == n), "Inhibition"] == "ci"){
        M5Edata[(M5Edata$Sample == i & M5Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[2]])
      }else{
        M5Edata[(M5Edata$Sample == i & M5Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M5d[(M5d$Sample == i & M5d$Enzyme == n), ])[[2]])
      }
    }
  }
}

M5Edata <- M5Edata[M5Edata$Sample<600, ]
M5Edata$Conditions<-c("Aerobic")

#==============M6 - sample IDs 13, 14, 16, 21, 22, 23, 24, 36, 94, 95, 97, 98, 102, 103, 104, 666
Samples=rbind(c(13, 14, 16, 21), c(22, 23, 24, 36), c(94, 95, 97, 98), c(102, 103, 104, 666))
DW=cbind(c(0.28, 0.28, 0.28, 0.28), c(0.28,0.29, 0.27, 0.28), 
         c(0.2738, 0.2716, 0.2669, 0.2726), c(0.2748, 0.2663, 0.2737, 0.2757))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
M6<-ECalculatorJunior(dataset = "MUF M6.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 37, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M6d<-M6$data
#=====Quick vizualization
ggplot(subset(M6d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M6d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M6d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M6d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M6d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M6d$P0<-NA
M6d$S0<-NA
for(i in unique(M6d$Sample)){
  for(n in unique(M6d$ConcEnzyme2)){
    M6d[(M6d$Sample == i & M6d$ConcEnzyme2 == n), "P0"] <- 
      M6d[(M6d$Sample == i & M6d$ConcEnzyme2 == n & M6d$Time == 0), "Pcorr2"]
    M6d[(M6d$Sample == i & M6d$ConcEnzyme2 == n), "S0"] <- 
      M6d[(M6d$Sample == i & M6d$ConcEnzyme2 == n & M6d$Time == 0), "ConcEnzyme2"] - M6d[(M6d$Sample == i & M6d$ConcEnzyme2 == n & M6d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
M6kinetics<-data.frame(Sample = rep(unique(M6d$Sample), each = 5), Enzyme = rep(unique(M6d$Enzyme), times = length(unique(M6d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M6d$Sample)){
  for(n in unique(M6d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M6kinetics[(M6kinetics$Sample == i & M6kinetics$Enzyme == n), "wi"]<-wiSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[1]]
        M6kinetics[(M6kinetics$Sample == i & M6kinetics$Enzyme == n), "si"]<-siSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[1]]
        M6kinetics[(M6kinetics$Sample == i & M6kinetics$Enzyme == n), "ci"]<-ciSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[1]]
        M6kinetics[(M6kinetics$Sample == i & M6kinetics$Enzyme == n), "nci"]<-nciSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[1]]
        M6kinetics[(M6kinetics$Sample == i & M6kinetics$Enzyme == n), "uci"]<-uciSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[1]]
        M6kinetics[(M6kinetics$Sample == i & M6kinetics$Enzyme == n), "nt"]<-nrow(M6d[(M6d$Sample == i & M6d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M6kinetics)){
  #Probability of better goodness of fit as compared to wi
  M6kinetics$si.p[i] = round(pf(q=(M6kinetics$wi[i] - M6kinetics$si[i])*(M6kinetics$nt[i] - 3)/M6kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M6kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M6kinetics$ci.p[i] = round(pf(q=(M6kinetics$wi[i] - M6kinetics$ci[i])*(M6kinetics$nt[i] - 3)/M6kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M6kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M6kinetics$nci.p[i] = round(pf(q=(M6kinetics$wi[i] - M6kinetics$nci[i])*(M6kinetics$nt[i] - 3)/M6kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M6kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  M6kinetics$uci.p[i] = round(pf(q=(M6kinetics$wi[i] - M6kinetics$uci[i])*(M6kinetics$nt[i] - 3)/M6kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M6kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M6Edata <- data.frame(Sample = rep(unique(M6d$Sample), each = 5), 
                      Enzyme = rep(unique(M6d$Enzyme), times = length(unique(M6d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M6Edata$Inhibition <- NA

for(i in 1:nrow(M6kinetics)){
  if(M6kinetics$ci.p[i]<0.05 | M6kinetics$nci.p[i]<0.05 | M6kinetics$uci.p[i]<0.05){
    M6Edata$Inhibition[i]<-names(which.min(M6kinetics[i, c(3, 5:7)]))
  }else{
    M6Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M6Edata$Sample)){
  for(n in unique(M6Edata$Enzyme)){
    M6Edata[(M6Edata$Sample == i & M6Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M6Edata$Sample)){
  for(n in unique(M6Edata$Enzyme)){
    if(M6Edata[(M6Edata$Sample == i & M6Edata$Enzyme == n), "Inhibition"] == "wi"){
      M6Edata[(M6Edata$Sample == i & M6Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(M6Edata[(M6Edata$Sample == i & M6Edata$Enzyme == n), "Inhibition"] == "ci"){
        M6Edata[(M6Edata$Sample == i & M6Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[2]])
      }else{
        M6Edata[(M6Edata$Sample == i & M6Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M6d[(M6d$Sample == i & M6d$Enzyme == n), ])[[2]])
      }
    }
  }
}

M6Edata<-M6Edata[M6Edata$Sample<600, ]
M6Edata$Conditions<-c("Aerobic")

#==============M7 - sample IDs 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 58, 60
Samples=rbind(c(17, 18, 19, 20), c(26, 27, 28, 29), c(30, 31, 58, 60))
DW=cbind(c(0.28, 0.27, 0.27, 0.29), c(0.28,0.28, 0.28, 0.28), 
         c(0.29, 0.27, 0.29, 0.29))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
M7<-ECalculatorJunior3Plates(dataset = "MUF M7.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 28, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M7d<-M7$data
#=====Quick vizualization
ggplot(subset(M7d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M7d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M7d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M7d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M7d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M7d$P0<-NA
M7d$S0<-NA
for(i in unique(M7d$Sample)){
  for(n in unique(M7d$ConcEnzyme2)){
    M7d[(M7d$Sample == i & M7d$ConcEnzyme2 == n), "P0"] <- 
      M7d[(M7d$Sample == i & M7d$ConcEnzyme2 == n & M7d$Time == 0), "Pcorr2"]
    M7d[(M7d$Sample == i & M7d$ConcEnzyme2 == n), "S0"] <- 
      M7d[(M7d$Sample == i & M7d$ConcEnzyme2 == n & M7d$Time == 0), "ConcEnzyme2"] - M7d[(M7d$Sample == i & M7d$ConcEnzyme2 == n & M7d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
M7kinetics<-data.frame(Sample = rep(unique(M7d$Sample), each = 5), Enzyme = rep(unique(M7d$Enzyme), times = length(unique(M7d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M7d$Sample)){
  for(n in unique(M7d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M7kinetics[(M7kinetics$Sample == i & M7kinetics$Enzyme == n), "wi"]<-wiSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[1]]
        M7kinetics[(M7kinetics$Sample == i & M7kinetics$Enzyme == n), "si"]<-siSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[1]]
        M7kinetics[(M7kinetics$Sample == i & M7kinetics$Enzyme == n), "ci"]<-ciSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[1]]
        M7kinetics[(M7kinetics$Sample == i & M7kinetics$Enzyme == n), "nci"]<-nciSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[1]]
        M7kinetics[(M7kinetics$Sample == i & M7kinetics$Enzyme == n), "uci"]<-uciSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[1]]
        M7kinetics[(M7kinetics$Sample == i & M7kinetics$Enzyme == n), "nt"]<-nrow(M7d[(M7d$Sample == i & M7d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M7kinetics)){
  #Probability of better goodness of fit as compared to wi
  M7kinetics$si.p[i] = round(pf(q=(M7kinetics$wi[i] - M7kinetics$si[i])*(M7kinetics$nt[i] - 3)/M7kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M7kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M7kinetics$ci.p[i] = round(pf(q=(M7kinetics$wi[i] - M7kinetics$ci[i])*(M7kinetics$nt[i] - 3)/M7kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M7kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M7kinetics$nci.p[i] = round(pf(q=(M7kinetics$wi[i] - M7kinetics$nci[i])*(M7kinetics$nt[i] - 3)/M7kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M7kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  M7kinetics$uci.p[i] = round(pf(q=(M7kinetics$wi[i] - M7kinetics$uci[i])*(M7kinetics$nt[i] - 3)/M7kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M7kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M7Edata <- data.frame(Sample = rep(unique(M7d$Sample), each = 5), 
                      Enzyme = rep(unique(M7d$Enzyme), times = length(unique(M7d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M7Edata$Inhibition <- NA

for(i in 1:nrow(M7kinetics)){
  if(M7kinetics$ci.p[i]<0.05 | M7kinetics$nci.p[i]<0.05 | M7kinetics$uci.p[i]<0.05){
    M7Edata$Inhibition[i]<-names(which.min(M7kinetics[i, c(3, 5:7)]))
  }else{
    M7Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M7Edata$Sample)){
  for(n in unique(M7Edata$Enzyme)){
    M7Edata[(M7Edata$Sample == i & M7Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M7Edata$Sample)){
  for(n in unique(M7Edata$Enzyme)){
    if(M7Edata[(M7Edata$Sample == i & M7Edata$Enzyme == n), "Inhibition"] == "wi"){
      M7Edata[(M7Edata$Sample == i & M7Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(M7Edata[(M7Edata$Sample == i & M7Edata$Enzyme == n), "Inhibition"] == "ci"){
        M7Edata[(M7Edata$Sample == i & M7Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[2]])
      }else{
        M7Edata[(M7Edata$Sample == i & M7Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M7d[(M7d$Sample == i & M7d$Enzyme == n), ])[[2]])
      }
    }
  }
}

M7Edata$Conditions<-c("Aerobic")

#==============M8 - sample IDs 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 5, 6, 7, 8, 15, 99
Samples=rbind(c(111, 112, 113, 114), c(115, 116, 117, 118), c(119, 120, 5, 6), c(7, 8, 15, 99))
DW=cbind(c(0.2769, 0.2752, 0.2983, 0.2934), c(0.3008,0.299, 0.2854, 0.2852), 
         c(0.2818, 0.2835, 0.3368, 0.3368), c(0.3368, 0.3368, 0.28, 0.267))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
M8<-ECalculatorJunior(dataset = "MUF M8.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 37, empty = 1,
                      Samples = Samples,
                      DW = DW)
#=====Data
M8d<-M8$data
#=====Quick vizualization
ggplot(subset(M8d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M8d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M8d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M8d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(M8d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
M8d$P0<-NA
M8d$S0<-NA
for(i in unique(M8d$Sample)){
  for(n in unique(M8d$ConcEnzyme2)){
    M8d[(M8d$Sample == i & M8d$ConcEnzyme2 == n), "P0"] <- 
      M8d[(M8d$Sample == i & M8d$ConcEnzyme2 == n & M8d$Time == 0), "Pcorr2"]
    M8d[(M8d$Sample == i & M8d$ConcEnzyme2 == n), "S0"] <- 
      M8d[(M8d$Sample == i & M8d$ConcEnzyme2 == n & M8d$Time == 0), "ConcEnzyme2"] - M8d[(M8d$Sample == i & M8d$ConcEnzyme2 == n & M8d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
M8kinetics<-data.frame(Sample = rep(unique(M8d$Sample), each = 5), Enzyme = rep(unique(M8d$Enzyme), times = length(unique(M8d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(M8d$Sample)){
  for(n in unique(M8d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        M8kinetics[(M8kinetics$Sample == i & M8kinetics$Enzyme == n), "wi"]<-wiSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[1]]
        M8kinetics[(M8kinetics$Sample == i & M8kinetics$Enzyme == n), "si"]<-siSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[1]]
        M8kinetics[(M8kinetics$Sample == i & M8kinetics$Enzyme == n), "ci"]<-ciSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[1]]
        M8kinetics[(M8kinetics$Sample == i & M8kinetics$Enzyme == n), "nci"]<-nciSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[1]]
        M8kinetics[(M8kinetics$Sample == i & M8kinetics$Enzyme == n), "uci"]<-uciSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[1]]
        M8kinetics[(M8kinetics$Sample == i & M8kinetics$Enzyme == n), "nt"]<-nrow(M8d[(M8d$Sample == i & M8d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(M8kinetics)){
  #Probability of better goodness of fit as compared to wi
  M8kinetics$si.p[i] = round(pf(q=(M8kinetics$wi[i] - M8kinetics$si[i])*(M8kinetics$nt[i] - 3)/M8kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M8kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M8kinetics$ci.p[i] = round(pf(q=(M8kinetics$wi[i] - M8kinetics$ci[i])*(M8kinetics$nt[i] - 3)/M8kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(M8kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  M8kinetics$nci.p[i] = round(pf(q=(M8kinetics$wi[i] - M8kinetics$nci[i])*(M8kinetics$nt[i] - 3)/M8kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M8kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  M8kinetics$uci.p[i] = round(pf(q=(M8kinetics$wi[i] - M8kinetics$uci[i])*(M8kinetics$nt[i] - 3)/M8kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(M8kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
M8Edata <- data.frame(Sample = rep(unique(M8d$Sample), each = 5), 
                      Enzyme = rep(unique(M8d$Enzyme), times = length(unique(M8d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
M8Edata$Inhibition <- NA

for(i in 1:nrow(M8kinetics)){
  if(M8kinetics$ci.p[i]<0.05 | M8kinetics$nci.p[i]<0.05 | M8kinetics$uci.p[i]<0.05){
    M8Edata$Inhibition[i]<-names(which.min(M8kinetics[i, c(3, 5:7)]))
  }else{
    M8Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(M8Edata$Sample)){
  for(n in unique(M8Edata$Enzyme)){
    M8Edata[(M8Edata$Sample == i & M8Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(M8Edata$Sample)){
  for(n in unique(M8Edata$Enzyme)){
    if(M8Edata[(M8Edata$Sample == i & M8Edata$Enzyme == n), "Inhibition"] == "wi"){
      M8Edata[(M8Edata$Sample == i & M8Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(M8Edata[(M8Edata$Sample == i & M8Edata$Enzyme == n), "Inhibition"] == "ci"){
        M8Edata[(M8Edata$Sample == i & M8Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[2]])
      }else{
        M8Edata[(M8Edata$Sample == i & M8Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = M8d[(M8d$Sample == i & M8d$Enzyme == n), ])[[2]])
      }
    }
  }
}

M8Edata$Conditions<-c("Aerobic")
EdataAerobic<-rbind(M1Edata, M2Edata, M3Edata, M4Edata, M5Edata, M6Edata, M7Edata, M8Edata)
EdataAerobic<-EdataAerobic[order(EdataAerobic$Sample, EdataAerobic$Enzyme), ]

#=================Exporting data - each enzyme separately
#Beta glucosidase
write.csv(EdataAerobic[EdataAerobic$Enzyme=="BetaG", ], file = "BetaGAerobic_final.csv", row.names = F)
#Cellobiosidase
write.csv(EdataAerobic[EdataAerobic$Enzyme=="Cellob", ], file = "CellobAerobic_final.csv", row.names = F)
#Chitinase
write.csv(EdataAerobic[EdataAerobic$Enzyme=="Chitin", ], file = "ChitinAerobic_final.csv", row.names = F)
#Leucine aminopeptidase
write.csv(EdataAerobic[EdataAerobic$Enzyme=="Leucin", ], file = "LeucinAerobic_final.csv", row.names = F)
#Phosphatase
write.csv(EdataAerobic[EdataAerobic$Enzyme=="Phosph", ], file = "PhosphAerobic_final.csv", row.names = F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#==========================================ANAEROBIC INCUBATION===========================================# 

#==============AnM1 - sample IDs 49, 101, 102, 103, 104, 110, 50, 52, 57, 58, 60, 65, 66, 68, 70, 73
Samples=rbind(c(49, 101, 102, 103), c(104, 110, 50, 52), c(57, 58, 60, 65), c(66, 68, 70, 73))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM1<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M1an.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 36, empty = 0,
                      Samples = Samples,
                      DW = DW)
#=====Data
AnM1d<-AnM1$data
#=====Quick vizualization
ggplot(subset(AnM1d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM1d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM1d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM1d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM1d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM1d$P0<-NA
AnM1d$S0<-NA
for(i in unique(AnM1d$Sample)){
  for(n in unique(AnM1d$ConcEnzyme2)){
    AnM1d[(AnM1d$Sample == i & AnM1d$ConcEnzyme2 == n), "P0"] <- 
      AnM1d[(AnM1d$Sample == i & AnM1d$ConcEnzyme2 == n & AnM1d$Time == 0), "Pcorr2"]
    AnM1d[(AnM1d$Sample == i & AnM1d$ConcEnzyme2 == n), "S0"] <- 
      AnM1d[(AnM1d$Sample == i & AnM1d$ConcEnzyme2 == n & AnM1d$Time == 0), "ConcEnzyme2"] - AnM1d[(AnM1d$Sample == i & AnM1d$ConcEnzyme2 == n & AnM1d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM1kinetics<-data.frame(Sample = rep(unique(AnM1d$Sample), each = 5), Enzyme = rep(unique(AnM1d$Enzyme), times = length(unique(AnM1d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM1d$Sample)){
  for(n in unique(AnM1d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM1kinetics[(AnM1kinetics$Sample == i & AnM1kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[1]]
        AnM1kinetics[(AnM1kinetics$Sample == i & AnM1kinetics$Enzyme == n), "si"]<-siSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[1]]
        AnM1kinetics[(AnM1kinetics$Sample == i & AnM1kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[1]]
        AnM1kinetics[(AnM1kinetics$Sample == i & AnM1kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[1]]
        AnM1kinetics[(AnM1kinetics$Sample == i & AnM1kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[1]]
        AnM1kinetics[(AnM1kinetics$Sample == i & AnM1kinetics$Enzyme == n), "nt"]<-nrow(AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM1kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM1kinetics$si.p[i] = round(pf(q=(AnM1kinetics$wi[i] - AnM1kinetics$si[i])*(AnM1kinetics$nt[i] - 3)/AnM1kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM1kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM1kinetics$ci.p[i] = round(pf(q=(AnM1kinetics$wi[i] - AnM1kinetics$ci[i])*(AnM1kinetics$nt[i] - 3)/AnM1kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM1kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM1kinetics$nci.p[i] = round(pf(q=(AnM1kinetics$wi[i] - AnM1kinetics$nci[i])*(AnM1kinetics$nt[i] - 3)/AnM1kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM1kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM1kinetics$uci.p[i] = round(pf(q=(AnM1kinetics$wi[i] - AnM1kinetics$uci[i])*(AnM1kinetics$nt[i] - 3)/AnM1kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM1kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM1Edata <- data.frame(Sample = rep(unique(AnM1d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM1d$Enzyme), times = length(unique(AnM1d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM1Edata$Inhibition <- NA

for(i in 1:nrow(AnM1kinetics)){
  if(AnM1kinetics$ci.p[i]<0.05 | AnM1kinetics$nci.p[i]<0.05 | AnM1kinetics$uci.p[i]<0.05){
    AnM1Edata$Inhibition[i]<-names(which.min(AnM1kinetics[i, c(3, 5:7)]))
  }else{
    AnM1Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM1Edata$Sample)){
  for(n in unique(AnM1Edata$Enzyme)){
    AnM1Edata[(AnM1Edata$Sample == i & AnM1Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM1Edata$Sample)){
  for(n in unique(AnM1Edata$Enzyme)){
    if(AnM1Edata[(AnM1Edata$Sample == i & AnM1Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM1Edata[(AnM1Edata$Sample == i & AnM1Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM1Edata[(AnM1Edata$Sample == i & AnM1Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM1Edata[(AnM1Edata$Sample == i & AnM1Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[2]])
      }else{
        AnM1Edata[(AnM1Edata$Sample == i & AnM1Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM1d[(AnM1d$Sample == i & AnM1d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM1Edata$Conditions<-c("Anaerobic")

#==============AnM2 - sample IDs 74 - 77, 78 - 81, 82 - 85, 86, 87, 88, 666
Samples=rbind(c(74:77), c(78:81), c(82:85), c(86, 87, 88, 666))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM2<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M2an.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 36, empty = 0,
                      Samples = Samples,
                      DW = DW)
#=====Data
AnM2d<-AnM2$data
#=====Quick vizualization
ggplot(subset(AnM2d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM2d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM2d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM2d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM2d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM2d$P0<-NA
AnM2d$S0<-NA
for(i in unique(AnM2d$Sample)){
  for(n in unique(AnM2d$ConcEnzyme2)){
    AnM2d[(AnM2d$Sample == i & AnM2d$ConcEnzyme2 == n), "P0"] <- 
      AnM2d[(AnM2d$Sample == i & AnM2d$ConcEnzyme2 == n & AnM2d$Time == 0), "Pcorr2"]
    AnM2d[(AnM2d$Sample == i & AnM2d$ConcEnzyme2 == n), "S0"] <- 
      AnM2d[(AnM2d$Sample == i & AnM2d$ConcEnzyme2 == n & AnM2d$Time == 0), "ConcEnzyme2"] - AnM2d[(AnM2d$Sample == i & AnM2d$ConcEnzyme2 == n & AnM2d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM2kinetics<-data.frame(Sample = rep(unique(AnM2d$Sample), each = 5), Enzyme = rep(unique(AnM2d$Enzyme), times = length(unique(AnM2d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM2d$Sample)){
  for(n in unique(AnM2d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM2kinetics[(AnM2kinetics$Sample == i & AnM2kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[1]]
        AnM2kinetics[(AnM2kinetics$Sample == i & AnM2kinetics$Enzyme == n), "si"]<-siSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[1]]
        AnM2kinetics[(AnM2kinetics$Sample == i & AnM2kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[1]]
        AnM2kinetics[(AnM2kinetics$Sample == i & AnM2kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[1]]
        AnM2kinetics[(AnM2kinetics$Sample == i & AnM2kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[1]]
        AnM2kinetics[(AnM2kinetics$Sample == i & AnM2kinetics$Enzyme == n), "nt"]<-nrow(AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM2kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM2kinetics$si.p[i] = round(pf(q=(AnM2kinetics$wi[i] - AnM2kinetics$si[i])*(AnM2kinetics$nt[i] - 3)/AnM2kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM2kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM2kinetics$ci.p[i] = round(pf(q=(AnM2kinetics$wi[i] - AnM2kinetics$ci[i])*(AnM2kinetics$nt[i] - 3)/AnM2kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM2kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM2kinetics$nci.p[i] = round(pf(q=(AnM2kinetics$wi[i] - AnM2kinetics$nci[i])*(AnM2kinetics$nt[i] - 3)/AnM2kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM2kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM2kinetics$uci.p[i] = round(pf(q=(AnM2kinetics$wi[i] - AnM2kinetics$uci[i])*(AnM2kinetics$nt[i] - 3)/AnM2kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM2kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM2Edata <- data.frame(Sample = rep(unique(AnM2d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM2d$Enzyme), times = length(unique(AnM2d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM2Edata$Inhibition <- NA

for(i in 1:nrow(AnM2kinetics)){
  if(AnM2kinetics$ci.p[i]<0.05 | AnM2kinetics$nci.p[i]<0.05 | AnM2kinetics$uci.p[i]<0.05){
    AnM2Edata$Inhibition[i]<-names(which.min(AnM2kinetics[i, c(3, 5:7)]))
  }else{
    AnM2Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM2Edata$Sample)){
  for(n in unique(AnM2Edata$Enzyme)){
    AnM2Edata[(AnM2Edata$Sample == i & AnM2Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM2Edata$Sample)){
  for(n in unique(AnM2Edata$Enzyme)){
    if(AnM2Edata[(AnM2Edata$Sample == i & AnM2Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM2Edata[(AnM2Edata$Sample == i & AnM2Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM2Edata[(AnM2Edata$Sample == i & AnM2Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM2Edata[(AnM2Edata$Sample == i & AnM2Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[2]])
      }else{
        AnM2Edata[(AnM2Edata$Sample == i & AnM2Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM2d[(AnM2d$Sample == i & AnM2d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM2Edata <- AnM2Edata[AnM2Edata$Sample<600, ]
AnM2Edata$Conditions<-c("Anaerobic")

#==============AnM3 - sample IDs 1 - 4, 9, 10, 11, 17, 18, 19, 20, 29, 30 - 33 
Samples=rbind(c(1:4), c(9, 10, 11, 17), c(18, 19, 20, 29), c(30:33))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM3<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M3an.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 36, empty = 0,
                      Samples = Samples,
                      DW = DW)
#=====Data
AnM3d<-AnM3$data
#=====Quick vizualization
ggplot(subset(AnM3d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM3d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM3d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM3d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM3d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM3d$P0<-NA
AnM3d$S0<-NA
for(i in unique(AnM3d$Sample)){
  for(n in unique(AnM3d$ConcEnzyme2)){
    AnM3d[(AnM3d$Sample == i & AnM3d$ConcEnzyme2 == n), "P0"] <- 
      AnM3d[(AnM3d$Sample == i & AnM3d$ConcEnzyme2 == n & AnM3d$Time == 0), "Pcorr2"]
    AnM3d[(AnM3d$Sample == i & AnM3d$ConcEnzyme2 == n), "S0"] <- 
      AnM3d[(AnM3d$Sample == i & AnM3d$ConcEnzyme2 == n & AnM3d$Time == 0), "ConcEnzyme2"] - AnM3d[(AnM3d$Sample == i & AnM3d$ConcEnzyme2 == n & AnM3d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM3kinetics<-data.frame(Sample = rep(unique(AnM3d$Sample), each = 5), Enzyme = rep(unique(AnM3d$Enzyme), times = length(unique(AnM3d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM3d$Sample)){
  for(n in unique(AnM3d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM3kinetics[(AnM3kinetics$Sample == i & AnM3kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[1]]
        AnM3kinetics[(AnM3kinetics$Sample == i & AnM3kinetics$Enzyme == n), "si"]<-siSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[1]]
        AnM3kinetics[(AnM3kinetics$Sample == i & AnM3kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[1]]
        AnM3kinetics[(AnM3kinetics$Sample == i & AnM3kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[1]]
        AnM3kinetics[(AnM3kinetics$Sample == i & AnM3kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[1]]
        AnM3kinetics[(AnM3kinetics$Sample == i & AnM3kinetics$Enzyme == n), "nt"]<-nrow(AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM3kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM3kinetics$si.p[i] = round(pf(q=(AnM3kinetics$wi[i] - AnM3kinetics$si[i])*(AnM3kinetics$nt[i] - 3)/AnM3kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM3kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM3kinetics$ci.p[i] = round(pf(q=(AnM3kinetics$wi[i] - AnM3kinetics$ci[i])*(AnM3kinetics$nt[i] - 3)/AnM3kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM3kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM3kinetics$nci.p[i] = round(pf(q=(AnM3kinetics$wi[i] - AnM3kinetics$nci[i])*(AnM3kinetics$nt[i] - 3)/AnM3kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM3kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM3kinetics$uci.p[i] = round(pf(q=(AnM3kinetics$wi[i] - AnM3kinetics$uci[i])*(AnM3kinetics$nt[i] - 3)/AnM3kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM3kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM3Edata <- data.frame(Sample = rep(unique(AnM3d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM3d$Enzyme), times = length(unique(AnM3d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM3Edata$Inhibition <- NA

for(i in 1:nrow(AnM3kinetics)){
  if(AnM3kinetics$ci.p[i]<0.05 | AnM3kinetics$nci.p[i]<0.05 | AnM3kinetics$uci.p[i]<0.05){
    AnM3Edata$Inhibition[i]<-names(which.min(AnM3kinetics[i, c(3, 5:7)]))
  }else{
    AnM3Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM3Edata$Sample)){
  for(n in unique(AnM3Edata$Enzyme)){
    AnM3Edata[(AnM3Edata$Sample == i & AnM3Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM3Edata$Sample)){
  for(n in unique(AnM3Edata$Enzyme)){
    if(AnM3Edata[(AnM3Edata$Sample == i & AnM3Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM3Edata[(AnM3Edata$Sample == i & AnM3Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM3Edata[(AnM3Edata$Sample == i & AnM3Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM3Edata[(AnM3Edata$Sample == i & AnM3Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[2]])
      }else{
        AnM3Edata[(AnM3Edata$Sample == i & AnM3Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM3d[(AnM3d$Sample == i & AnM3d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM3Edata$Conditions<-c("Anaerobic")

#==============AnM4 - sample IDs 12, 25, 26, 27, 28, 34, 35, 36, 42, 43, 44, 51, 53 - 56
Samples=rbind(c(12, 25, 26, 27), c(28, 34, 35, 36), c(42, 43, 44, 51), c(53:56))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM4<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M4an.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 36, empty = 0,
                      Samples = Samples,
                      DW = DW)
#=====Data
AnM4d<-AnM4$data
#=====Quick vizualization
ggplot(subset(AnM4d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM4d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM4d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM4d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM4d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM4d$P0<-NA
AnM4d$S0<-NA
for(i in unique(AnM4d$Sample)){
  for(n in unique(AnM4d$ConcEnzyme2)){
    AnM4d[(AnM4d$Sample == i & AnM4d$ConcEnzyme2 == n), "P0"] <- 
      AnM4d[(AnM4d$Sample == i & AnM4d$ConcEnzyme2 == n & AnM4d$Time == 0), "Pcorr2"]
    AnM4d[(AnM4d$Sample == i & AnM4d$ConcEnzyme2 == n), "S0"] <- 
      AnM4d[(AnM4d$Sample == i & AnM4d$ConcEnzyme2 == n & AnM4d$Time == 0), "ConcEnzyme2"] - AnM4d[(AnM4d$Sample == i & AnM4d$ConcEnzyme2 == n & AnM4d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM4kinetics<-data.frame(Sample = rep(unique(AnM4d$Sample), each = 5), Enzyme = rep(unique(AnM4d$Enzyme), times = length(unique(AnM4d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM4d$Sample)){
  for(n in unique(AnM4d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM4kinetics[(AnM4kinetics$Sample == i & AnM4kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[1]]
        AnM4kinetics[(AnM4kinetics$Sample == i & AnM4kinetics$Enzyme == n), "si"]<-siSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[1]]
        AnM4kinetics[(AnM4kinetics$Sample == i & AnM4kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[1]]
        AnM4kinetics[(AnM4kinetics$Sample == i & AnM4kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[1]]
        AnM4kinetics[(AnM4kinetics$Sample == i & AnM4kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[1]]
        AnM4kinetics[(AnM4kinetics$Sample == i & AnM4kinetics$Enzyme == n), "nt"]<-nrow(AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM4kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM4kinetics$si.p[i] = round(pf(q=(AnM4kinetics$wi[i] - AnM4kinetics$si[i])*(AnM4kinetics$nt[i] - 3)/AnM4kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM4kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM4kinetics$ci.p[i] = round(pf(q=(AnM4kinetics$wi[i] - AnM4kinetics$ci[i])*(AnM4kinetics$nt[i] - 3)/AnM4kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM4kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM4kinetics$nci.p[i] = round(pf(q=(AnM4kinetics$wi[i] - AnM4kinetics$nci[i])*(AnM4kinetics$nt[i] - 3)/AnM4kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM4kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM4kinetics$uci.p[i] = round(pf(q=(AnM4kinetics$wi[i] - AnM4kinetics$uci[i])*(AnM4kinetics$nt[i] - 3)/AnM4kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM4kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM4Edata <- data.frame(Sample = rep(unique(AnM4d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM4d$Enzyme), times = length(unique(AnM4d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM4Edata$Inhibition <- NA

for(i in 1:nrow(AnM4kinetics)){
  if(AnM4kinetics$ci.p[i]<0.05 | AnM4kinetics$nci.p[i]<0.05 | AnM4kinetics$uci.p[i]<0.05){
    AnM4Edata$Inhibition[i]<-names(which.min(AnM4kinetics[i, c(3, 5:7)]))
  }else{
    AnM4Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM4Edata$Sample)){
  for(n in unique(AnM4Edata$Enzyme)){
    AnM4Edata[(AnM4Edata$Sample == i & AnM4Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM4Edata$Sample)){
  for(n in unique(AnM4Edata$Enzyme)){
    if(AnM4Edata[(AnM4Edata$Sample == i & AnM4Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM4Edata[(AnM4Edata$Sample == i & AnM4Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM4Edata[(AnM4Edata$Sample == i & AnM4Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM4Edata[(AnM4Edata$Sample == i & AnM4Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[2]])
      }else{
        AnM4Edata[(AnM4Edata$Sample == i & AnM4Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM4d[(AnM4d$Sample == i & AnM4d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM4Edata$Conditions<-c("Anaerobic")

#==============AnM5 - sample IDs 99, 109, 111, 112, 117 - 120, 67, 93, 94, 95, 96, 98, 666, 667
Samples=rbind(c(99, 109, 111, 112), c(117:120), c(67, 93, 94, 95), c(96, 98, 666, 667))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM5<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M5an.xlsx", #zdrojovy soubor
                             Kalibracni = c(1,5,10), 
                             Substraty = c(224/20, 224/2, 224),
                             Nmeasure = 36, empty = 0,
                             Samples = Samples,
                             DW = DW)
#=====Data
AnM5d<-AnM5$data
#=====Quick vizualization
ggplot(subset(AnM5d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM5d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM5d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM5d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM5d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM5d$P0<-NA
AnM5d$S0<-NA
for(i in unique(AnM5d$Sample)){
  for(n in unique(AnM5d$ConcEnzyme2)){
    AnM5d[(AnM5d$Sample == i & AnM5d$ConcEnzyme2 == n), "P0"] <- 
      AnM5d[(AnM5d$Sample == i & AnM5d$ConcEnzyme2 == n & AnM5d$Time == 0), "Pcorr2"]
    AnM5d[(AnM5d$Sample == i & AnM5d$ConcEnzyme2 == n), "S0"] <- 
      AnM5d[(AnM5d$Sample == i & AnM5d$ConcEnzyme2 == n & AnM5d$Time == 0), "ConcEnzyme2"] - AnM5d[(AnM5d$Sample == i & AnM5d$ConcEnzyme2 == n & AnM5d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM5kinetics<-data.frame(Sample = rep(unique(AnM5d$Sample), each = 5), Enzyme = rep(unique(AnM5d$Enzyme), times = length(unique(AnM5d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM5d$Sample)){
  for(n in unique(AnM5d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM5kinetics[(AnM5kinetics$Sample == i & AnM5kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[1]]
        AnM5kinetics[(AnM5kinetics$Sample == i & AnM5kinetics$Enzyme == n), "si"]<-siSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[1]]
        AnM5kinetics[(AnM5kinetics$Sample == i & AnM5kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[1]]
        AnM5kinetics[(AnM5kinetics$Sample == i & AnM5kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[1]]
        AnM5kinetics[(AnM5kinetics$Sample == i & AnM5kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[1]]
        AnM5kinetics[(AnM5kinetics$Sample == i & AnM5kinetics$Enzyme == n), "nt"]<-nrow(AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM5kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM5kinetics$si.p[i] = round(pf(q=(AnM5kinetics$wi[i] - AnM5kinetics$si[i])*(AnM5kinetics$nt[i] - 3)/AnM5kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM5kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM5kinetics$ci.p[i] = round(pf(q=(AnM5kinetics$wi[i] - AnM5kinetics$ci[i])*(AnM5kinetics$nt[i] - 3)/AnM5kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM5kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM5kinetics$nci.p[i] = round(pf(q=(AnM5kinetics$wi[i] - AnM5kinetics$nci[i])*(AnM5kinetics$nt[i] - 3)/AnM5kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM5kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM5kinetics$uci.p[i] = round(pf(q=(AnM5kinetics$wi[i] - AnM5kinetics$uci[i])*(AnM5kinetics$nt[i] - 3)/AnM5kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM5kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM5Edata <- data.frame(Sample = rep(unique(AnM5d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM5d$Enzyme), times = length(unique(AnM5d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM5Edata$Inhibition <- NA

for(i in 1:nrow(AnM5kinetics)){
  if(AnM5kinetics$ci.p[i]<0.05 | AnM5kinetics$nci.p[i]<0.05 | AnM5kinetics$uci.p[i]<0.05){
    AnM5Edata$Inhibition[i]<-names(which.min(AnM5kinetics[i, c(3, 5:7)]))
  }else{
    AnM5Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM5Edata$Sample)){
  for(n in unique(AnM5Edata$Enzyme)){
    AnM5Edata[(AnM5Edata$Sample == i & AnM5Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM5Edata$Sample)){
  for(n in unique(AnM5Edata$Enzyme)){
    if(AnM5Edata[(AnM5Edata$Sample == i & AnM5Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM5Edata[(AnM5Edata$Sample == i & AnM5Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM5Edata[(AnM5Edata$Sample == i & AnM5Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM5Edata[(AnM5Edata$Sample == i & AnM5Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[2]])
      }else{
        AnM5Edata[(AnM5Edata$Sample == i & AnM5Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM5d[(AnM5d$Sample == i & AnM5d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM5Edata <- AnM5Edata[AnM5Edata$Sample<600, ]
AnM5Edata$Conditions<-c("Anaerobic")

#==============AnM6 - sample IDs 100, 105, 106, 107, 108, 113, 114, 115, 116, 89, 90, 91, 82, 97, 666, 667 
Samples=rbind(c(100, 105, 106, 107), c(108, 113, 114, 115), c(116, 89, 90, 91), c(82, 97, 666, 667))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM6<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M6an.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 36, empty = 0,
                      Samples = Samples,
                      DW = DW)
#=====Data
AnM6d<-AnM6$data
#=====Quick vizualization
ggplot(subset(AnM6d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM6d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM6d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM6d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM6d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM6d$P0<-NA
AnM6d$S0<-NA
for(i in unique(AnM6d$Sample)){
  for(n in unique(AnM6d$ConcEnzyme2)){
    AnM6d[(AnM6d$Sample == i & AnM6d$ConcEnzyme2 == n), "P0"] <- 
      AnM6d[(AnM6d$Sample == i & AnM6d$ConcEnzyme2 == n & AnM6d$Time == 0), "Pcorr2"]
    AnM6d[(AnM6d$Sample == i & AnM6d$ConcEnzyme2 == n), "S0"] <- 
      AnM6d[(AnM6d$Sample == i & AnM6d$ConcEnzyme2 == n & AnM6d$Time == 0), "ConcEnzyme2"] - AnM6d[(AnM6d$Sample == i & AnM6d$ConcEnzyme2 == n & AnM6d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM6kinetics<-data.frame(Sample = rep(unique(AnM6d$Sample), each = 5), Enzyme = rep(unique(AnM6d$Enzyme), times = length(unique(AnM6d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM6d$Sample)){
  for(n in unique(AnM6d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM6kinetics[(AnM6kinetics$Sample == i & AnM6kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[1]]
        AnM6kinetics[(AnM6kinetics$Sample == i & AnM6kinetics$Enzyme == n), "si"]<-siSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[1]]
        AnM6kinetics[(AnM6kinetics$Sample == i & AnM6kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[1]]
        AnM6kinetics[(AnM6kinetics$Sample == i & AnM6kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[1]]
        AnM6kinetics[(AnM6kinetics$Sample == i & AnM6kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[1]]
        AnM6kinetics[(AnM6kinetics$Sample == i & AnM6kinetics$Enzyme == n), "nt"]<-nrow(AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM6kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM6kinetics$si.p[i] = round(pf(q=(AnM6kinetics$wi[i] - AnM6kinetics$si[i])*(AnM6kinetics$nt[i] - 3)/AnM6kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM6kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM6kinetics$ci.p[i] = round(pf(q=(AnM6kinetics$wi[i] - AnM6kinetics$ci[i])*(AnM6kinetics$nt[i] - 3)/AnM6kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM6kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM6kinetics$nci.p[i] = round(pf(q=(AnM6kinetics$wi[i] - AnM6kinetics$nci[i])*(AnM6kinetics$nt[i] - 3)/AnM6kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM6kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM6kinetics$uci.p[i] = round(pf(q=(AnM6kinetics$wi[i] - AnM6kinetics$uci[i])*(AnM6kinetics$nt[i] - 3)/AnM6kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM6kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM6Edata <- data.frame(Sample = rep(unique(AnM6d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM6d$Enzyme), times = length(unique(AnM6d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM6Edata$Inhibition <- NA

for(i in 1:nrow(AnM6kinetics)){
  if(AnM6kinetics$ci.p[i]<0.05 | AnM6kinetics$nci.p[i]<0.05 | AnM6kinetics$uci.p[i]<0.05){
    AnM6Edata$Inhibition[i]<-names(which.min(AnM6kinetics[i, c(3, 5:7)]))
  }else{
    AnM6Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM6Edata$Sample)){
  for(n in unique(AnM6Edata$Enzyme)){
    AnM6Edata[(AnM6Edata$Sample == i & AnM6Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM6Edata$Sample)){
  for(n in unique(AnM6Edata$Enzyme)){
    if(AnM6Edata[(AnM6Edata$Sample == i & AnM6Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM6Edata[(AnM6Edata$Sample == i & AnM6Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM6Edata[(AnM6Edata$Sample == i & AnM6Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM6Edata[(AnM6Edata$Sample == i & AnM6Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[2]])
      }else{
        AnM6Edata[(AnM6Edata$Sample == i & AnM6Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM6d[(AnM6d$Sample == i & AnM6d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM6Edata<-AnM6Edata[AnM6Edata$Sample<600, ]
AnM6Edata$Conditions<-c("Anaerobic")

#==============AnM7 - sample IDs 5 - 8, 13 - 16, 21 - 24, 41, 666, 667, 668
Samples=rbind(c(5:8), c(13:16), c(21:24), c(41, 666, 667, 668))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM7<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M7an.xlsx", #zdrojovy soubor
                             Kalibracni = c(1,5,10), 
                             Substraty = c(224/20, 224/2, 224),
                             Nmeasure = 36, empty = 0,
                             Samples = Samples,
                             DW = DW)
#=====Data
AnM7d<-AnM7$data
#=====Quick vizualization
ggplot(subset(AnM7d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM7d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM7d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM7d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM7d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM7d$P0<-NA
AnM7d$S0<-NA
for(i in unique(AnM7d$Sample)){
  for(n in unique(AnM7d$ConcEnzyme2)){
    AnM7d[(AnM7d$Sample == i & AnM7d$ConcEnzyme2 == n), "P0"] <- 
      AnM7d[(AnM7d$Sample == i & AnM7d$ConcEnzyme2 == n & AnM7d$Time == 0), "Pcorr2"]
    AnM7d[(AnM7d$Sample == i & AnM7d$ConcEnzyme2 == n), "S0"] <- 
      AnM7d[(AnM7d$Sample == i & AnM7d$ConcEnzyme2 == n & AnM7d$Time == 0), "ConcEnzyme2"] - AnM7d[(AnM7d$Sample == i & AnM7d$ConcEnzyme2 == n & AnM7d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM7kinetics<-data.frame(Sample = rep(unique(AnM7d$Sample), each = 5), Enzyme = rep(unique(AnM7d$Enzyme), times = length(unique(AnM7d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM7d$Sample)){
  for(n in unique(AnM7d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM7kinetics[(AnM7kinetics$Sample == i & AnM7kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[1]]
        AnM7kinetics[(AnM7kinetics$Sample == i & AnM7kinetics$Enzyme == n), "si"]<-siSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[1]]
        AnM7kinetics[(AnM7kinetics$Sample == i & AnM7kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[1]]
        AnM7kinetics[(AnM7kinetics$Sample == i & AnM7kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[1]]
        AnM7kinetics[(AnM7kinetics$Sample == i & AnM7kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[1]]
        AnM7kinetics[(AnM7kinetics$Sample == i & AnM7kinetics$Enzyme == n), "nt"]<-nrow(AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM7kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM7kinetics$si.p[i] = round(pf(q=(AnM7kinetics$wi[i] - AnM7kinetics$si[i])*(AnM7kinetics$nt[i] - 3)/AnM7kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM7kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM7kinetics$ci.p[i] = round(pf(q=(AnM7kinetics$wi[i] - AnM7kinetics$ci[i])*(AnM7kinetics$nt[i] - 3)/AnM7kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM7kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM7kinetics$nci.p[i] = round(pf(q=(AnM7kinetics$wi[i] - AnM7kinetics$nci[i])*(AnM7kinetics$nt[i] - 3)/AnM7kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM7kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM7kinetics$uci.p[i] = round(pf(q=(AnM7kinetics$wi[i] - AnM7kinetics$uci[i])*(AnM7kinetics$nt[i] - 3)/AnM7kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM7kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM7Edata <- data.frame(Sample = rep(unique(AnM7d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM7d$Enzyme), times = length(unique(AnM7d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM7Edata$Inhibition <- NA

for(i in 1:nrow(AnM7kinetics)){
  if(AnM7kinetics$ci.p[i]<0.05 | AnM7kinetics$nci.p[i]<0.05 | AnM7kinetics$uci.p[i]<0.05){
    AnM7Edata$Inhibition[i]<-names(which.min(AnM7kinetics[i, c(3, 5:7)]))
  }else{
    AnM7Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM7Edata$Sample)){
  for(n in unique(AnM7Edata$Enzyme)){
    AnM7Edata[(AnM7Edata$Sample == i & AnM7Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM7Edata$Sample)){
  for(n in unique(AnM7Edata$Enzyme)){
    if(AnM7Edata[(AnM7Edata$Sample == i & AnM7Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM7Edata[(AnM7Edata$Sample == i & AnM7Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM7Edata[(AnM7Edata$Sample == i & AnM7Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM7Edata[(AnM7Edata$Sample == i & AnM7Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[2]])
      }else{
        AnM7Edata[(AnM7Edata$Sample == i & AnM7Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM7d[(AnM7d$Sample == i & AnM7d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM7Edata <- AnM7Edata[AnM7Edata$Sample < 600, ]
AnM7Edata$Conditions<-c("Anaerobic")

#==============AnM8 - sample IDs 37 - 40, 45 - 48, 59, 61, 62, 63, 64, 69, 71, 72
Samples=rbind(c(37:40), c(45:48), c(59, 61, 62, 63), c(64, 69, 71, 72))
DW=cbind(rep(0.28, 4), rep(0.28, 4), rep(0.28, 4), rep(0.28, 4))
rownames(DW)<-c("A", "B", "C", "D")
#=====Calculation
AnM8<-ECalculatorJunior(dataset = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/MUF M8an.xlsx", #zdrojovy soubor
                      Kalibracni = c(1,5,10), 
                      Substraty = c(224/20, 224/2, 224),
                      Nmeasure = 36, empty = 0,
                      Samples = Samples,
                      DW = DW)
#=====Data
AnM8d<-AnM8$data
#=====Quick vizualization
ggplot(subset(AnM8d, Enzyme=="BetaG"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM8d, Enzyme=="Cellob"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM8d, Enzyme=="Chitin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM8d, Enzyme=="Leucin"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")
ggplot(subset(AnM8d, Enzyme=="Phosph"), aes(Time, Pcorr2)) + geom_point(cex=6, aes(color=ConcEnzyme2)) +
  facet_wrap(.~Sample, scales="free") + xlab("Time (h)")

#=====Specifying initial concentration of product (Pcorr2 at t = 0) and substrate (ConcEnz2 - Pcorr2 at t = 0)
AnM8d$P0<-NA
AnM8d$S0<-NA
for(i in unique(AnM8d$Sample)){
  for(n in unique(AnM8d$ConcEnzyme2)){
    AnM8d[(AnM8d$Sample == i & AnM8d$ConcEnzyme2 == n), "P0"] <- 
      AnM8d[(AnM8d$Sample == i & AnM8d$ConcEnzyme2 == n & AnM8d$Time == 0), "Pcorr2"]
    AnM8d[(AnM8d$Sample == i & AnM8d$ConcEnzyme2 == n), "S0"] <- 
      AnM8d[(AnM8d$Sample == i & AnM8d$ConcEnzyme2 == n & AnM8d$Time == 0), "ConcEnzyme2"] - AnM8d[(AnM8d$Sample == i & AnM8d$ConcEnzyme2 == n & AnM8d$Time == 0), "Pcorr2"]
  }
}

#=========================Enzyme kinetic calculation
#===============Find the best kinetic law 
AnM8kinetics<-data.frame(Sample = rep(unique(AnM8d$Sample), each = 5), Enzyme = rep(unique(AnM8d$Enzyme), times = length(unique(AnM8d$Sample))),
                       wi = NA, si = NA, ci = NA, nci = NA, uci = NA,
                       si.p = NA, ci.p = NA, nci.p = NA, uci.p = NA, nt = NA)
for(i in unique(AnM8d$Sample)){
  for(n in unique(AnM8d$Enzyme)){
    tryCatch(
      {
        #Residual sum of squares
        AnM8kinetics[(AnM8kinetics$Sample == i & AnM8kinetics$Enzyme == n), "wi"]<-wiSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[1]]
        AnM8kinetics[(AnM8kinetics$Sample == i & AnM8kinetics$Enzyme == n), "si"]<-siSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[1]]
        AnM8kinetics[(AnM8kinetics$Sample == i & AnM8kinetics$Enzyme == n), "ci"]<-ciSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[1]]
        AnM8kinetics[(AnM8kinetics$Sample == i & AnM8kinetics$Enzyme == n), "nci"]<-nciSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[1]]
        AnM8kinetics[(AnM8kinetics$Sample == i & AnM8kinetics$Enzyme == n), "uci"]<-uciSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[1]]
        AnM8kinetics[(AnM8kinetics$Sample == i & AnM8kinetics$Enzyme == n), "nt"]<-nrow(AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])
        
      }, error = function(e){cat("ERROR in:", i, n)}
    )
    
  }
}

for(i in 1:nrow(AnM8kinetics)){
  #Probability of better goodness of fit as compared to wi
  AnM8kinetics$si.p[i] = round(pf(q=(AnM8kinetics$wi[i] - AnM8kinetics$si[i])*(AnM8kinetics$nt[i] - 3)/AnM8kinetics$si[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM8kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM8kinetics$ci.p[i] = round(pf(q=(AnM8kinetics$wi[i] - AnM8kinetics$ci[i])*(AnM8kinetics$nt[i] - 3)/AnM8kinetics$ci[i]/(3 - 2), 
                                df1=(3 - 2), 
                                df2=(AnM8kinetics$nt[i] - 3), 
                                lower.tail=F), 3)
  AnM8kinetics$nci.p[i] = round(pf(q=(AnM8kinetics$wi[i] - AnM8kinetics$nci[i])*(AnM8kinetics$nt[i] - 3)/AnM8kinetics$nci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM8kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
  AnM8kinetics$uci.p[i] = round(pf(q=(AnM8kinetics$wi[i] - AnM8kinetics$uci[i])*(AnM8kinetics$nt[i] - 3)/AnM8kinetics$uci[i]/(3 - 2), 
                                 df1=(3 - 2), 
                                 df2=(AnM8kinetics$nt[i] - 3), 
                                 lower.tail=F), 3)
}

#===============Apply the best kinetic law and estimate the kinetic parameters. MM kinetic parameters are estimated as well
AnM8Edata <- data.frame(Sample = rep(unique(AnM8d$Sample), each = 5), 
                      Enzyme = rep(unique(AnM8d$Enzyme), times = length(unique(AnM8d$Sample))),
                      VmaxMM = NA, KmMM = NA, Vmax = NA, Km = NA, Ki = NA, Inhibition = NA)
#In following script, substrate inhibition is ignored because it gives the same results as non-competitive inhibition
AnM8Edata$Inhibition <- NA

for(i in 1:nrow(AnM8kinetics)){
  if(AnM8kinetics$ci.p[i]<0.05 | AnM8kinetics$nci.p[i]<0.05 | AnM8kinetics$uci.p[i]<0.05){
    AnM8Edata$Inhibition[i]<-names(which.min(AnM8kinetics[i, c(3, 5:7)]))
  }else{
    AnM8Edata$Inhibition[i]<-c("wi")
  }
}

#MM-kinetic parameters
for(i in unique(AnM8Edata$Sample)){
  for(n in unique(AnM8Edata$Enzyme)){
    AnM8Edata[(AnM8Edata$Sample == i & AnM8Edata$Enzyme == n), c(3:4)]<-as.numeric(wiSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[2]])
  }
}

#Best kinetic law parameters
for(i in unique(AnM8Edata$Sample)){
  for(n in unique(AnM8Edata$Enzyme)){
    if(AnM8Edata[(AnM8Edata$Sample == i & AnM8Edata$Enzyme == n), "Inhibition"] == "wi"){
      AnM8Edata[(AnM8Edata$Sample == i & AnM8Edata$Enzyme == n), c(5:7)]<-c(as.numeric(wiSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[2]]), NA)
    }else{
      if(AnM8Edata[(AnM8Edata$Sample == i & AnM8Edata$Enzyme == n), "Inhibition"] == "ci"){
        AnM8Edata[(AnM8Edata$Sample == i & AnM8Edata$Enzyme == n), c(5:7)]<-as.numeric(ciSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[2]])
      }else{
        AnM8Edata[(AnM8Edata$Sample == i & AnM8Edata$Enzyme == n), c(5:7)]<-as.numeric(nciSearch(data = AnM8d[(AnM8d$Sample == i & AnM8d$Enzyme == n), ])[[2]])
      }
    }
  }
}

AnM8Edata$Conditions<-c("Anaerobic")
EdataAnaerobic<-rbind(AnM1Edata, AnM2Edata, AnM3Edata, AnM4Edata, AnM5Edata, AnM6Edata, AnM7Edata, AnM8Edata)
EdataAnaerobic<-EdataAnaerobic[order(EdataAnaerobic$Sample, EdataAnaerobic$Enzyme), ]

#=================Exporting data - each enzyme separately
#Beta glucosidase
write.csv(EdataAnaerobic[EdataAnaerobic$Enzyme=="BetaG", ], file = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/BetaGAnaerobic_final.csv", row.names = F)
#Cellobiosidase
write.csv(EdataAnaerobic[EdataAnaerobic$Enzyme=="Cellob", ], file = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/CellobAnaerobic_final.csv", row.names = F)
#Chitinase
write.csv(EdataAnaerobic[EdataAnaerobic$Enzyme=="Chitin", ], file = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/ChitinAnaerobic_final.csv", row.names = F)
#Leucine aminopeptidase
write.csv(EdataAnaerobic[EdataAnaerobic$Enzyme=="Leucin", ], file = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/LeucinAnaerobic_final.csv", row.names = F)
#Phosphatase
write.csv(EdataAnaerobic[EdataAnaerobic$Enzyme=="Phosph", ], file = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/anaerobni/Enzymes/PhosphAnaerobic_final.csv", row.names = F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~All data~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
EdataJunior <- rbind(EdataAerobic, EdataAnaerobic)
write.csv(EdataJunior, file = "/mnt/580CBE2464C5F83D/pracovni/data_statistika/Junior/Inkubace/EdataJunior.csv", row.names = F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NOT RUN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# #====test - phosphatase - sample 2
# wiP2<-nls(wi, data = subset(M1d, Sample == 2 & Enzyme == "Phosph"), start = list(Vmax = 0.1, Km = 10))
# wiP2.2 <- wiSearch(data = subset(M1d, Sample == 2 & Enzyme == "Phosph"))
# 
# siP2<-nls(si, data = subset(M1d, Sample == 2 & Enzyme == "Phosph"), start = list(Vmax = 0.1, Km = 10, Ki = 100))
# siP2.2 <- siSearch(data = subset(M1d, Sample == 2 & Enzyme == "Phosph"))
# 
# ciP2<-nls(ci, data = subset(M1d, Sample == 2 & Enzyme == "Phosph"), start = list(Vmax = 1, Km = 1, Kic = 1))
# ciP2.2 <- ciSearch(data = subset(M1d, Sample == 2 & Enzyme == "Phosph"))
# 
# nciP2<-nls(nci, data = subset(M1d, Sample == 2 & Enzyme == "Phosph"), start = list(Vmax = 0.1, Km = 1, Kiu = 100))
# nciP2.2 <- nciSearch(data = subset(M1d, Sample == 2 & Enzyme == "Phosph"))
# 
# uciP2<-nls(uci, data = subset(M1d, Sample == 2 & Enzyme == "Phosph"), start = list(Vmax = 0.1, Km = 1, Kiu = 100))
# uciP2.2 <- uciSearch(data = subset(M1d, Sample == 2 & Enzyme == "Phosph"))
# 
# ###AIC test
# AICtab(wiP2, siP2, nciP2, weights=T, sort=T, base=T, logLik=T)
# summary(wiP2)
# 
# summary(siP2)
# siP2.2
# 
# summary(ciP2)
# ciP2.2
# 
# summary(nciP2)
# nciP2.2
# 
# uciP2.2
# 
# anova(wiP2, nciP2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
