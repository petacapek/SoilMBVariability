#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Global optimization~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#==============Model parameters and predictions are derived across all studies analyzed above
#Read predictions calculated in Python
GlobalFitDE<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/GlobalSearchSpecific/globalResultsDE.csv")
ggplot(GlobalFitDE, aes(Observation, Simulation)) + geom_point(cex = 6, aes(color = Study)) + theme_min +
facet_wrap(~Variable, scales = "free") + geom_abline(intercept = 0, slope = 1)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Global optimization~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#==============Model parameters and predictions are derived across all studies analyzed above
#Read predictions calculated in Python
GlobalFitDE<-read.csv("/mnt/580CBE2464C5F83D/pracovni/data_statistika/SoilMBVariability/PythonScripts/GlobalSearchSpecific/globalResultsDE.csv")
ggplot(GlobalFitDE, aes(Observation, Simulation)) + geom_point(cex = 6, aes(color = Study)) + theme_min +
facet_wrap(~Variable, scales = "free") + geom_abline(intercept = 0, slope = 1)
##Relaxing assumption 5
nlsDEB1 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v[Substrate]*Time/24))/(0.25 + e0[Substrate]*exp(-v[Substrate]*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v = c(0.1, 0.1)))
summary(nlsDEB1)
##Relaxing assumption 5
nlsDEB1 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v[Substrate]*Time))/(0.25 + e0[Substrate]*exp(-v[Substrate]*Time)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v = c(0.1, 0.1)))
##Relaxing assumption 5
nlsDEB1 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v[Substrate]*Time))/(0.25 + e0[Substrate]*exp(-v[Substrate]*Time)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v = c(0.01, 0.01)))
summary(nlsDEB1)
##Relaxing assumption 5
nlsDEB1 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v[Substrate]*Time/24))/(0.25 + e0[Substrate]*exp(-v[Substrate]*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v = c(0.1, 0.1)))
summary(nlsDEB1)
0.121560/0.005065
0.196872/0.008203
###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/3.76*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/3.76*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.01))
###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/3.76*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/3.76*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.1))
summary(nlsDEB3)
anova(nls0, nlsDEB3)
anova(nlsDEB1, nlsDEB3)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better
library(bbmle)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better
###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/4*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/4*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.1))
summary(nlsDEB3)
anova(nls0, nlsDEB3)
anova(nlsDEB1, nlsDEB3)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better
teststat <- -2 * (75.7-69.7)
teststat
pchisq(teststat, df = 4, lower.tail = FALSE)
teststat <- -2 * (69.7 - 75.7)
pchisq(teststat, df = 4, lower.tail = FALSE)
-2*(-1678.742 - -1675.847)
pchisq(-2*(-1678.742 - -1675.847), df = 4-3, lower.tail = FALSE)
###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v2*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v2*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.01, v2 = 0.1))
summary(nlsDEB3)
anova(nls0, nlsDEB3)
anova(nlsDEB1, nlsDEB3)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better
###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.01))
###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.1))
summary(nlsDEB3)
anova(nls0, nlsDEB3)
anova(nlsDEB1, nlsDEB3)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better
#Visualizing the fit
DEBcoefs3<-coef(nlsDEB3)
DEBcoefs3
ggplot(GlData, aes(Time/24, kec_original)) + geom_point(cex=6, pch=21, aes(fill = Substrate)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) + xlab("Time (days)") +
theme(legend.position = c(0.8, 0.6), legend.title = element_blank()) +
scale_fill_manual(values = c("white", "grey")) + scale_y_continuous(limits = c(0.2, 0.43)) +
#geom_hline(yintercept = 0.38, lwd = 1, lty = 2)# +
#stat_function(fun = function(x){Gcoefs[1]*exp(-Gcoefs[2]*x)+Gcoefs[3]*exp(-Gcoefs[4]*x)}, lwd = 1.5, color = "red") + #Glucose
#stat_function(fun = function(x){Acoefs[1]*exp(-Acoefs[2]*x)+Acoefs[3]*exp(-Acoefs[4]*x)}, lwd = 1.5)  + #Alanin
stat_function(fun = function(x){(DEBcoefs3[1]/4 + DEBcoefs3[2]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[2]*exp(-DEBcoefs3[4]/90*x))/
(0.25 + DEBcoefs3[2]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[2]*exp(-DEBcoefs3[4]/90*x))}, lwd = 1.5) + #Alanin
stat_function(fun = function(x){(DEBcoefs1[1]/4 + DEBcoefs3[3]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[3]*exp(-DEBcoefs3[4]/90*x))/
(0.25 + DEBcoefs3[3]*exp(-DEBcoefs3[4]*x) + DEBcoefs3[3]*exp(-DEBcoefs3[4]/90*x))}, lwd = 1.5, color = "grey") #Glucose
0.025*24
0.01*24
10^2
100^-2
100^1/2
100^1/4
100^1/10
100^(1/2)
(0. 25/0.01)^((37-29.5)/10)
(0.025/0.01)^((37-29.5)/10)
0.025/(2^((37-22.5)/10))
0.025/(2^((37-22.5)/10))*24
0.009150536*24
1/(1+0.344)
1/(1+0.356)
library(reticulate)
import numpy as np
source_python(objectiveWP)
source_python("objectiveWP.py")
source_python("/mnt/580CBE2464C5F83D/pracovni/misc/toPodruh2/SoilMBVariability/Scripts/objectiveWP.py")
View(r)
objectiveWP<-source_python("/mnt/580CBE2464C5F83D/pracovni/misc/toPodruh2/SoilMBVariability/Scripts/objectiveWP.py")
objectiveWP
objectiveWP(x)
objectiveWP
show(objectiveWP)
print(objectiveWP)
source_python("/mnt/580CBE2464C5F83D/pracovni/misc/toPodruh2/SoilMBVariability/Scripts/objectiveWP.py")
objectiveWP(0.1)
setwd("/mnt/580CBE2464C5F83D/pracovni/misc/toPodruh2/SoilMBVariability/Scripts")
objectiveWP(0.1)
objectiveWP(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 1, 1, 1))
c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)
objectiveWP(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
#Libraries
library(ggplot2)
library(dplyr)
library(reshape)
library(minpack.lm)
library(bbmle)
library(deSolve)
library(FME)
library(DEoptim)
library(ABCoptim)
library(rcompanion)
source_python(objectiveWP)
source_python(objectiveM)
source_python(objectiveG)
source_python(objectiveB)
source_python(objectiveBl)
source_python(objectiveS)
source_python(objectiveJ)
source_python(objectiveT)
source_python(objectiveN_A)
source_python(objectiveN_B)
source_python(objectiveN_C)
source_python("objectiveM")
setwd("/mnt/580CBE2464C5F83D/pracovni/misc/toPodruh2/SoilMBVariability/Scripts")
source_python(objectiveWP)
source_python("objectiveM")
source_python(objectiveWP.py)
source_python("objectiveM.py")
source_python("objectiveWP.py")
source_python("objectiveM.py")
source_python("objectiveG")
source_python("objectiveB")
source_python("objectiveBl")
source_python("objectiveS")
source_python("objectiveJ")
source_python("objectiveT")
source_python("objectiveN_A")
source_python("objectiveN_B")
source_python("objectiveN_C")
source_python("objectiveWP.py")
source_python("objectiveM.py")
source_python("objectiveG.py")
source_python("objectiveB.py")
source_python("objectiveBl.py")
source_python("objectiveS.py")
source_python("objectiveJ.py")
source_python("objectiveT.py")
source_python("objectiveN_A.py")
source_python("objectiveN_B.py")
source_python("objectiveN_C.py")
objectiveB(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveWP(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveM(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveG(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveB(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveBl(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveS(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveJ(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveT(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveN_A(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveN_B(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
objectiveN_C(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0))
xtest=c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)
sum(objectiveWP(xtest), objectiveM(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveG(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveB(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveBl(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveS(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveJ(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveT(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveN_A(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveN_B(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)),
objectiveN_C(c(0.05, 4000, 30, 0.1, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 0, 0, 0)))
costf<-function(x){
return(sum(objectiveWP(x), objectiveM(x), objectiveG(x), objectiveB(x), objectiveBl(x),
objectiveS(x), objectiveJ(x), objectiveT(x), objectiveN_A(x), objectiveN_B(x), objectiveN_C(x)))
}
p0 = c(0.1, 500, 2, 0.24, 0.354, 4, 0.3, 0.01, 1e-4, 1e-4, 70, 70, 0.5, 0.5, 0.5)
pl = c(0.01, 10, 0.3, 1e-15, 0.08, 0.3, 0.1, 0.001, 1e-6, 1e-6, 1, 1, 0, 0, 0)
pu = c(1, 4000,30, 0.5, 5, 7, 0.45, 0.5, 0.2, 0.2, 100, 100, 1, 1, 1)
mcmc<-modMCMC(f=costf, p=p0, lower=pl, upper=pu, niter=1000)
summary(mcmc)
###Applying assumptions 6 and relaxing assumption 5
nlsDEB3 <- nls(kec_original ~ (nX1/4 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24))/(0.25 + e0[Substrate]*exp(-v1*Time/24)+e0[Substrate]*exp(-v1/90*Time/24)),
GlData, start = list(nX1 = 0.3, e0 = c(1e-3, 1e-3), v1 = 0.1))
summary(nlsDEB3)
anova(nls0, nlsDEB3)
anova(nlsDEB1, nlsDEB3)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better
library(bbmle)
AICtab(nls0, nlsDEB3, sort = T, weights = T, logLik = T, base = T)#DEB theory doesn't explain data better
summary(nlsDEB3)
summary(nls0)
###fitting across treatments
nlsDEBT2<-nls(kec~(0.25*nX1 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/90)/(1 + 1/90))/
(0.25 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/90)/(1 + 1/90)), data = TData,
start = list(nX1 = 0.3, Km1 = 10, Km2 = 100))
###fitting across treatments
nlsDEBT2<-nls(kec~(0.25*nX1 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/90)/(1 + 1/90))/
(0.25 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/90)/(1 + 1/90)), data = TData,
start = list(nX1 = 0.3, Km1 = 10, Km2 = 1000))
library(minpack.lm)
###fitting across treatments
nlsDEBT2<-nlsLM(kec~(0.25*nX1 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/90)/(1 + 1/90))/
(0.25 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/90)/(1 + 1/90)), data = TData,
start = list(nX1 = 0.3, Km1 = 10, Km2 = 1000))
summary(nlsDEBT)
summary(nlsDEBT2)
###fitting across treatments
nlsDEBT2<-nlsLM(kec~(0.25*nX1 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/3.76)/(1 + 1/3.76))/
(0.25 + (Ctot/(Km1 + Ctot) + Ctot/(Km2 + Ctot)/3.76)/(1 + 1/3.76)), data = TData,
start = list(nX1 = 0.3, Km1 = 10, Km2 = 1000))
summary(nlsDEBT2)
###fitting across treatments
nlsDEBT2<-nls(kec~(0.25*nX1 + (Ctot/(Km + Ctot) + Ctot/(Km/400 + Ctot)/90)/(1 + 1/90))/
(0.25 + (Ctot/(Km + Ctot) + Ctot/(Km/400 + Ctot)/90)/(1 + 1/90)), data = TData,
start = list(nX1 = 0.3, Km2 = 1000))
###fitting across treatments
nlsDEBT2<-nls(kec~(0.25*nX1 + (Ctot/(Km + Ctot) + Ctot/(Km/400 + Ctot)/90)/(1 + 1/90))/
(0.25 + (Ctot/(Km + Ctot) + Ctot/(Km/400 + Ctot)/90)/(1 + 1/90)), data = TData,
start = list(nX1 = 0.3, Km = 1000))
summary(nlsDEBT2)
summary(nlsDEBT)
#=====================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Study of Tessier et al. (1998)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Data
TData = read.csv("../SoilMBVariabilityData/Tessier1998.csv")
#Visualizing the data
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic  carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15))
library(ggplot2)
#Visualizing the data
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic  carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15))
summary(lm(DOC~Ctot, TData))
###fitting across treatments
nlsDEBT<-nls(kec~(0.25*nX1 + Ctot/(Km + Ctot))/(0.25 + Ctot/(Km + Ctot)), data = TData,
start = list(nX1 = 0.3, Km = 10))
summary(nlsDEBT)
###fitting for each treatment separately
nlsDEBT2<-nls(kec~(0.25*nX1[Treatment] + Ctot/(Km[Treatment] + Ctot))/(0.25 + Ctot/(Km[Treatment] + Ctot)), data = TData,
start = list(nX1 = c(0.3, 0.3), Km = c(1000, 1000)))
summary(nlsDEBT2)
anova(nlsDEBT, nlsDEBT2)
coefDEBT<-coef(nlsDEBT2)
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
stat_function(fun = function(x){(0.25*coefDEBT[1] + x/(coefDEBT[3] + x))/(0.25 + x/(coefDEBT[3] + x))}, lwd = 1.5) +
stat_function(fun = function(x){(0.25*coefDEBT[2] + x/(coefDEBT[4] + x))/(0.25 + x/(coefDEBT[4] + x))}, lwd = 1.5, lty = 2)
###fitting across treatments
nlsDEBT2<-nls(kec~(0.25*nX1 + (Ctot/(Km + Ctot) + Ctot/(Km/400 + Ctot)/90)/(1 + 1/90))/
(0.25 + (Ctot/(Km + Ctot) + Ctot/(Km/400 + Ctot)/90)/(1 + 1/90)), data = TData,
start = list(nX1 = 0.3, Km = 1000))
summary(nlsDEBT2)
##Using MCMC
costT = function(data){
costIn <- function(x){return(sum((data$kec~(0.25*x[1] + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90))/
(0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90)))^2, na.rm = T))}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 500), lower=c(0.1, 0.1), upper=c(1, 4000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
#Libraries
library(ggplot2)
library(dplyr)
library(reshape)
library(minpack.lm)
library(bbmle)
library(deSolve)
library(FME)
library(DEoptim)
library(ABCoptim)
library(rcompanion)
coefManure<-costT(TData[TData$Treatment=="Manure", ])
##Using MCMC
costT = function(data){
costIn <- function(x){return(sum((data$kec~(0.25*x[1] + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90))/
(0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90)))^2, na.rm = T))}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 500), lower=c(0.1, 0.1), upper=c(1, 4000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
##Using MCMC
costT = function(data){
costIn <- function(x){
return(sum((data$kec-(0.25*x[1] + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90))/
(0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90)))^2, na.rm = T))
}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 500), lower=c(0.1, 0.1), upper=c(1, 4000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
coefManure
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
coefUnfert
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
stat_function(fun = function(x){(0.25*coefManure[1] + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5)
##Using MCMC
costT = function(data){
costIn <- function(x){
return(sum((data$kec-(0.25*x[1] + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/500 + data$Ctot)/3.76)/(1 + 1/3.76))/
(0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/500 + data$Ctot)/3.76)/(1 + 1/3.76)))^2, na.rm = T))
}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 500), lower=c(0.1, 0.1), upper=c(1, 4000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
coefManure
coefUnfert
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
stat_function(fun = function(x){(0.25*coefManure[1] + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5)
##Using MCMC
costT = function(data){
costIn <- function(x){
return(sum((data$kec-(0.25*x[1] + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90))/
(0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90)))^2, na.rm = T))
}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 500), lower=c(0, 0.01), upper=c(1, 40000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
coefManure
coefUnfert
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
stat_function(fun = function(x){(0.25*coefManure[1] + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5)
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
stat_function(fun = function(x){(0.25*coefManure[1] + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5) +
stat_function(fun = function(x){(0.25*coefUnfert[1] + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5, lty = 2)
##Using MCMC
costT = function(data){
costIn <- function(x){
return(sum((data$kec-(0.25*x[1] + (data$DOC/(x[2] + data$DOC) + data$DOC/(x[2]/400 + data$DOC)/90)/(1 + 1/90))/
(0.25 + (data$DOC/(x[2] + data$DOC) + data$DOC/(x[2]/400 + data$DOC)/90)/(1 + 1/90)))^2, na.rm = T))
}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 500), lower=c(0, 0.01), upper=c(1, 40000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
ggplot(TData, aes(DOC, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
stat_function(fun = function(x){(0.25*coefManure[1] + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5) +
stat_function(fun = function(x){(0.25*coefUnfert[1] + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5, lty = 2)
##Using MCMC
costT = function(data){
costIn <- function(x){
return(sum((data$kec-(0.25*x[1] + x[3]*(data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90))/
(0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90)))^2, na.rm = T))
}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 500, 0.8), lower=c(0, 0.01, 0), upper=c(1, 40000, 1), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
coefManure
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
stat_function(fun = function(x){(0.25*coefManure[1] + coefManure[3]*(x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5) +
stat_function(fun = function(x){(0.25*coefUnfert[1] + coefUnfert[3]*(x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))/
(0.25 + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5, lty = 2)
coefManure
coefUnfert
##Using MCMC
costT = function(data){
costIn <- function(x){
# return(sum((data$kec-(0.25*x[1] + x[3]*(data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90))/
#   (0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90)))^2, na.rm = T))
return(sum((data$kec~(0.25*x[1] + x[2]*data$Ctot/(x[3] + data$Ctot))/(0.25 + data$Ctot/(x[3] + data$Ctot)))^2, na.rm = T))
}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 0.8, 500), lower=c(0, 0, 0.1), upper=c(1, 1, 40000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
##Using MCMC
costT = function(data){
costIn <- function(x){
# return(sum((data$kec-(0.25*x[1] + x[3]*(data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90))/
#   (0.25 + (data$Ctot/(x[2] + data$Ctot) + data$Ctot/(x[2]/400 + data$Ctot)/90)/(1 + 1/90)))^2, na.rm = T))
return(sum((data$kec-(0.25*x[1] + x[2]*data$Ctot/(x[3] + data$Ctot))/(0.25 + data$Ctot/(x[3] + data$Ctot)))^2, na.rm = T))
}
###Parameters estimation using MCMC
mcmc<-modMCMC(f=costIn, p=c(0.3, 0.8, 500), lower=c(0, 0, 0.1), upper=c(1, 1, 40000), niter=100000)
###Improving the estimation using differential evolution algorithm
DE<-DEoptim(fn=costIn, lower=as.numeric(summary(mcmc)["min",]), upper=as.numeric(summary(mcmc)["max",]),
control = c(itermax = 10000, steptol = 50, reltol = 1e-8, trace=FALSE, strategy=3, NP=250))
return(DE$optim$bestmem)
}
coefManure<-costT(TData[TData$Treatment=="Manure", ])
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
coefManure
coefUnfert
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
#  stat_function(fun = function(x){(0.25*coefManure[1] + coefManure[3]*(x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
#      (0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5) +
# stat_function(fun = function(x){(0.25*coefUnfert[1] + coefUnfert[3]*(x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))/
#     (0.25 + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5, lty = 2) +
stat_function(fun = function(x){(0.25*coefManure[1] + coefManure[2]*x/(coefManure[3] + x))/(0.25 + x/(coefManure[3] + x))}, lwd = 1.5) +
stat_function(fun = function(x){(0.25*coefUnfert[2] + coefUnfert[2]*x/(coefUnfert[3] + x))/(0.25 + x/(coefUnfert[3] + x))}, lwd = 1.5, lty = 2)
coefUnfert<-costT(TData[TData$Treatment!="Manure", ])
coefUnfert
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
#  stat_function(fun = function(x){(0.25*coefManure[1] + coefManure[3]*(x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
#      (0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5) +
# stat_function(fun = function(x){(0.25*coefUnfert[1] + coefUnfert[3]*(x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))/
#     (0.25 + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5, lty = 2) +
stat_function(fun = function(x){(0.25*coefManure[1] + coefManure[2]*x/(coefManure[3] + x))/(0.25 + x/(coefManure[3] + x))}, lwd = 1.5) +
stat_function(fun = function(x){(0.25*coefUnfert[2] + coefUnfert[2]*x/(coefUnfert[3] + x))/(0.25 + x/(coefUnfert[3] + x))}, lwd = 1.5, lty = 2)
ggplot(TData, aes(Ctot, kec)) + geom_point(cex=6, pch=21, aes(fill = Treatment)) +
theme_min + ylab(expression(paste(italic(k[ec])~factor))) +
xlab(expression(paste("Total organic carbon (", mu, 'mol(C) ', g^{-1}, ')'))) +
theme(legend.position = c(0.8, 0.15)) +
#  stat_function(fun = function(x){(0.25*coefManure[1] + coefManure[3]*(x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))/
#      (0.25 + (x/(coefManure[2] + x) + x/(coefManure[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5) +
# stat_function(fun = function(x){(0.25*coefUnfert[1] + coefUnfert[3]*(x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))/
#     (0.25 + (x/(coefUnfert[2] + x) + x/(coefUnfert[2]/400 + x)/90)/(1 + 1/90))}, lwd = 1.5, lty = 2) +
stat_function(fun = function(x){(0.25*coefManure[1] + coefManure[2]*x/(coefManure[3] + x))/(0.25 + x/(coefManure[3] + x))}, lwd = 1.5) +
stat_function(fun = function(x){(0.25*coefUnfert[1] + coefUnfert[2]*x/(coefUnfert[3] + x))/(0.25 + x/(coefUnfert[3] + x))}, lwd = 1.5, lty = 2)
